// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Api.V1.Applicationsets.Generate;
using ArgoCD.Sdk.Api.V1.Applicationsets.Item;
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applicationsets
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applicationsets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApplicationsetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The generate property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applicationsets.Generate.GenerateRequestBuilder Generate
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applicationsets.Generate.GenerateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ArgoCD.Sdk.api.v1.applicationsets.item collection</summary>
        /// <param name="position">the applicationsets&apos;s name</param>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applicationsets.Item.WithNameItemRequestBuilder"/></returns>
        public global::ArgoCD.Sdk.Api.V1.Applicationsets.Item.WithNameItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("name", position);
                return new global::ArgoCD.Sdk.Api.V1.Applicationsets.Item.WithNameItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applicationsets{?appsetNamespace*,dryRun*,projects*,selector*,upsert*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applicationsets{?appsetNamespace*,dryRun*,projects*,selector*,upsert*}", rawUrl)
        {
        }
        /// <summary>
        /// List returns list of applicationset
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetList?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetList> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetList>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create creates an applicationset
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet?> PostAsync(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet> PostAsync(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List returns list of applicationset
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create creates an applicationset
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSet body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List returns list of applicationset
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsetsRequestBuilderGetQueryParameters 
        {
            /// <summary>The application set namespace. Default empty is argocd control plane namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appsetNamespace")]
            public string? AppsetNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appsetNamespace")]
            public string AppsetNamespace { get; set; }
#endif
            /// <summary>the project names to restrict returned list applicationsets.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("projects")]
            public string[]? Projects { get; set; }
#nullable restore
#else
            [QueryParameter("projects")]
            public string[] Projects { get; set; }
#endif
            /// <summary>the selector to restrict returned list to applications only with matched labels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("selector")]
            public string? Selector { get; set; }
#nullable restore
#else
            [QueryParameter("selector")]
            public string Selector { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsetsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Create creates an applicationset
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsetsRequestBuilderPostQueryParameters 
        {
            [QueryParameter("dryRun")]
            public bool? DryRun { get; set; }
            [QueryParameter("upsert")]
            public bool? Upsert { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsetsRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder.ApplicationsetsRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
