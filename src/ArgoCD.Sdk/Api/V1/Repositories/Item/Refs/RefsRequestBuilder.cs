// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Repositories.Item.Refs
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\repositories\{repoRepo-id}\refs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RefsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RefsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/repositories/{repoRepo%2Did}/refs{?appProject*,forceRefresh*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RefsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/repositories/{repoRepo%2Did}/refs{?appProject*,forceRefresh*}", rawUrl)
        {
        }
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.RepositoryRefs"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.RepositoryRefs?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder.RefsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.RepositoryRefs> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder.RefsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.RepositoryRefs>(requestInfo, global::ArgoCD.Sdk.Models.RepositoryRefs.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder.RefsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder.RefsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        #pragma warning disable CS1591
        public partial class RefsRequestBuilderGetQueryParameters 
        #pragma warning restore CS1591
        {
            /// <summary>App project for query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appProject")]
            public string? AppProject { get; set; }
#nullable restore
#else
            [QueryParameter("appProject")]
            public string AppProject { get; set; }
#endif
            /// <summary>Whether to force a cache refresh on repo&apos;s connection state.</summary>
            [QueryParameter("forceRefresh")]
            public bool? ForceRefresh { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RefsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Refs.RefsRequestBuilder.RefsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
