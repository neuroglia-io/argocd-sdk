// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Repositories.Item.Validate
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\repositories\{repoRepo-id}\validate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ValidateRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ValidateRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/repositories/{repoRepo%2Did}/validate{?bearerToken*,enableOci*,forceHttpBasicAuth*,gcpServiceAccountKey*,githubAppEnterpriseBaseUrl*,githubAppID*,githubAppInstallationID*,githubAppPrivateKey*,insecure*,insecureOciForceHttp*,name*,password*,project*,proxy*,sshPrivateKey*,tlsClientCertData*,tlsClientCertKey*,type*,useAzureWorkloadIdentity*,username*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ValidateRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/repositories/{repoRepo%2Did}/validate{?bearerToken*,enableOci*,forceHttpBasicAuth*,gcpServiceAccountKey*,githubAppEnterpriseBaseUrl*,githubAppID*,githubAppInstallationID*,githubAppPrivateKey*,insecure*,insecureOciForceHttp*,name*,password*,project*,proxy*,sshPrivateKey*,tlsClientCertData*,tlsClientCertKey*,type*,useAzureWorkloadIdentity*,username*}", rawUrl)
        {
        }
        /// <summary>
        /// ValidateAccess validates access to a repository with given parameters
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.RepositoryRepoResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.RepositoryRepoResponse?> PostAsync(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder.ValidateRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.RepositoryRepoResponse> PostAsync(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder.ValidateRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(string.IsNullOrEmpty(body)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.RepositoryRepoResponse>(requestInfo, global::ArgoCD.Sdk.Models.RepositoryRepoResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// ValidateAccess validates access to a repository with given parameters
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder.ValidateRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder.ValidateRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            if(string.IsNullOrEmpty(body)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromScalar(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// ValidateAccess validates access to a repository with given parameters
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ValidateRequestBuilderPostQueryParameters 
        {
            /// <summary>BearerToken contains the bearer token used for Git auth at the repo server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("bearerToken")]
            public string? BearerToken { get; set; }
#nullable restore
#else
            [QueryParameter("bearerToken")]
            public string BearerToken { get; set; }
#endif
            /// <summary>Whether helm-oci support should be enabled for this repo.</summary>
            [QueryParameter("enableOci")]
            public bool? EnableOci { get; set; }
            /// <summary>Whether to force HTTP basic auth.</summary>
            [QueryParameter("forceHttpBasicAuth")]
            public bool? ForceHttpBasicAuth { get; set; }
            /// <summary>Google Cloud Platform service account key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("gcpServiceAccountKey")]
            public string? GcpServiceAccountKey { get; set; }
#nullable restore
#else
            [QueryParameter("gcpServiceAccountKey")]
            public string GcpServiceAccountKey { get; set; }
#endif
            /// <summary>Github App Enterprise base url if empty will default to https://api.github.com.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("githubAppEnterpriseBaseUrl")]
            public string? GithubAppEnterpriseBaseUrl { get; set; }
#nullable restore
#else
            [QueryParameter("githubAppEnterpriseBaseUrl")]
            public string GithubAppEnterpriseBaseUrl { get; set; }
#endif
            /// <summary>Github App ID of the app used to access the repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("githubAppID")]
            public string? GithubAppID { get; set; }
#nullable restore
#else
            [QueryParameter("githubAppID")]
            public string GithubAppID { get; set; }
#endif
            /// <summary>Github App Installation ID of the installed GitHub App.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("githubAppInstallationID")]
            public string? GithubAppInstallationID { get; set; }
#nullable restore
#else
            [QueryParameter("githubAppInstallationID")]
            public string GithubAppInstallationID { get; set; }
#endif
            /// <summary>Github App Private Key PEM data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("githubAppPrivateKey")]
            public string? GithubAppPrivateKey { get; set; }
#nullable restore
#else
            [QueryParameter("githubAppPrivateKey")]
            public string GithubAppPrivateKey { get; set; }
#endif
            /// <summary>Whether to skip certificate or host key validation.</summary>
            [QueryParameter("insecure")]
            public bool? Insecure { get; set; }
            /// <summary>Whether https should be disabled for an OCI repo.</summary>
            [QueryParameter("insecureOciForceHttp")]
            public bool? InsecureOciForceHttp { get; set; }
            /// <summary>The name of the repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>Password for accessing repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("password")]
            public string? Password { get; set; }
#nullable restore
#else
            [QueryParameter("password")]
            public string Password { get; set; }
#endif
            /// <summary>Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
            /// <summary>HTTP/HTTPS proxy to access the repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("proxy")]
            public string? Proxy { get; set; }
#nullable restore
#else
            [QueryParameter("proxy")]
            public string Proxy { get; set; }
#endif
            /// <summary>Private key data for accessing SSH repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sshPrivateKey")]
            public string? SshPrivateKey { get; set; }
#nullable restore
#else
            [QueryParameter("sshPrivateKey")]
            public string SshPrivateKey { get; set; }
#endif
            /// <summary>TLS client cert data for accessing HTTPS repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tlsClientCertData")]
            public string? TlsClientCertData { get; set; }
#nullable restore
#else
            [QueryParameter("tlsClientCertData")]
            public string TlsClientCertData { get; set; }
#endif
            /// <summary>TLS client cert key for accessing HTTPS repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tlsClientCertKey")]
            public string? TlsClientCertKey { get; set; }
#nullable restore
#else
            [QueryParameter("tlsClientCertKey")]
            public string TlsClientCertKey { get; set; }
#endif
            /// <summary>The type of the repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>Whether to use azure workload identity for authentication.</summary>
            [QueryParameter("useAzureWorkloadIdentity")]
            public bool? UseAzureWorkloadIdentity { get; set; }
            /// <summary>Username for accessing repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("username")]
            public string? Username { get; set; }
#nullable restore
#else
            [QueryParameter("username")]
            public string Username { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ValidateRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Repositories.Item.Validate.ValidateRequestBuilder.ValidateRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
