// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Api.V1.Account;
using ArgoCD.Sdk.Api.V1.Applications;
using ArgoCD.Sdk.Api.V1.Applicationsets;
using ArgoCD.Sdk.Api.V1.Certificates;
using ArgoCD.Sdk.Api.V1.Clusters;
using ArgoCD.Sdk.Api.V1.Gpgkeys;
using ArgoCD.Sdk.Api.V1.Notifications;
using ArgoCD.Sdk.Api.V1.Projects;
using ArgoCD.Sdk.Api.V1.Repocreds;
using ArgoCD.Sdk.Api.V1.Repositories;
using ArgoCD.Sdk.Api.V1.Session;
using ArgoCD.Sdk.Api.V1.Settings;
using ArgoCD.Sdk.Api.V1.StreamNamespace;
using ArgoCD.Sdk.Api.V1.WriteRepocreds;
using ArgoCD.Sdk.Api.V1.WriteRepositories;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace ArgoCD.Sdk.Api.V1
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1RequestBuilder : BaseRequestBuilder
    {
        /// <summary>The account property</summary>
        public global::ArgoCD.Sdk.Api.V1.Account.AccountRequestBuilder Account
        {
            get => new global::ArgoCD.Sdk.Api.V1.Account.AccountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The applications property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder Applications
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The applicationsets property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder Applicationsets
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applicationsets.ApplicationsetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The certificates property</summary>
        public global::ArgoCD.Sdk.Api.V1.Certificates.CertificatesRequestBuilder Certificates
        {
            get => new global::ArgoCD.Sdk.Api.V1.Certificates.CertificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clusters property</summary>
        public global::ArgoCD.Sdk.Api.V1.Clusters.ClustersRequestBuilder Clusters
        {
            get => new global::ArgoCD.Sdk.Api.V1.Clusters.ClustersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gpgkeys property</summary>
        public global::ArgoCD.Sdk.Api.V1.Gpgkeys.GpgkeysRequestBuilder Gpgkeys
        {
            get => new global::ArgoCD.Sdk.Api.V1.Gpgkeys.GpgkeysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notifications property</summary>
        public global::ArgoCD.Sdk.Api.V1.Notifications.NotificationsRequestBuilder Notifications
        {
            get => new global::ArgoCD.Sdk.Api.V1.Notifications.NotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projects property</summary>
        public global::ArgoCD.Sdk.Api.V1.Projects.ProjectsRequestBuilder Projects
        {
            get => new global::ArgoCD.Sdk.Api.V1.Projects.ProjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repocreds property</summary>
        public global::ArgoCD.Sdk.Api.V1.Repocreds.RepocredsRequestBuilder Repocreds
        {
            get => new global::ArgoCD.Sdk.Api.V1.Repocreds.RepocredsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repositories property</summary>
        public global::ArgoCD.Sdk.Api.V1.Repositories.RepositoriesRequestBuilder Repositories
        {
            get => new global::ArgoCD.Sdk.Api.V1.Repositories.RepositoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The session property</summary>
        public global::ArgoCD.Sdk.Api.V1.Session.SessionRequestBuilder Session
        {
            get => new global::ArgoCD.Sdk.Api.V1.Session.SessionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::ArgoCD.Sdk.Api.V1.Settings.SettingsRequestBuilder Settings
        {
            get => new global::ArgoCD.Sdk.Api.V1.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stream property</summary>
        public global::ArgoCD.Sdk.Api.V1.StreamNamespace.StreamRequestBuilder Stream
        {
            get => new global::ArgoCD.Sdk.Api.V1.StreamNamespace.StreamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The writeRepocreds property</summary>
        public global::ArgoCD.Sdk.Api.V1.WriteRepocreds.WriteRepocredsRequestBuilder WriteRepocreds
        {
            get => new global::ArgoCD.Sdk.Api.V1.WriteRepocreds.WriteRepocredsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The writeRepositories property</summary>
        public global::ArgoCD.Sdk.Api.V1.WriteRepositories.WriteRepositoriesRequestBuilder WriteRepositories
        {
            get => new global::ArgoCD.Sdk.Api.V1.WriteRepositories.WriteRepositoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.V1RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public V1RequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.V1RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public V1RequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
