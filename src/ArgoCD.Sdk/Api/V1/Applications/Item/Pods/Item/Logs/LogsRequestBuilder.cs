// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applications\{applicationMetadataName-id}\pods\{podName}\logs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LogsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/pods/{podName}/logs{?appNamespace*,container*,filter*,follow*,group*,kind*,matchCase*,namespace*,previous*,project*,resourceName*,sinceSeconds*,sinceTime%2Enanos*,sinceTime%2Eseconds*,tailLines*,untilTime*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/pods/{podName}/logs{?appNamespace*,container*,filter*,follow*,group*,kind*,matchCase*,namespace*,previous*,project*,resourceName*,sinceSeconds*,sinceTime%2Enanos*,sinceTime%2Eseconds*,tailLines*,untilTime*}", rawUrl)
        {
        }
        /// <summary>
        /// PodLogs returns stream of log entries for the specified pod. Pod
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsGetResponse?> GetAsLogsGetResponseAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsGetResponse> GetAsLogsGetResponseAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsGetResponse>(requestInfo, global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// PodLogs returns stream of log entries for the specified pod. Pod
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsLogsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsResponse?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsResponse> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsResponse>(requestInfo, global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// PodLogs returns stream of log entries for the specified pod. Pod
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// PodLogs returns stream of log entries for the specified pod. Pod
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("container")]
            public string? Container { get; set; }
#nullable restore
#else
            [QueryParameter("container")]
            public string Container { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("follow")]
            public bool? Follow { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("group")]
            public string? Group { get; set; }
#nullable restore
#else
            [QueryParameter("group")]
            public string Group { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
            [QueryParameter("matchCase")]
            public bool? MatchCase { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("namespace")]
            public string? Namespace { get; set; }
#nullable restore
#else
            [QueryParameter("namespace")]
            public string Namespace { get; set; }
#endif
            [QueryParameter("previous")]
            public bool? Previous { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceName")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resourceName")]
            public string ResourceName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sinceSeconds")]
            public string? SinceSeconds { get; set; }
#nullable restore
#else
            [QueryParameter("sinceSeconds")]
            public string SinceSeconds { get; set; }
#endif
            /// <summary>Non-negative fractions of a second at nanosecond resolution. Negativesecond values with fractions must still have non-negative nanos valuesthat count forward in time. Must be from 0 to 999,999,999inclusive. This field may be limited in precision depending on context.</summary>
            [QueryParameter("sinceTime%2Enanos")]
            public int? SinceTimeNanos { get; set; }
            /// <summary>Represents seconds of UTC time since Unix epoch1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to9999-12-31T23:59:59Z inclusive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sinceTime%2Eseconds")]
            public string? SinceTimeSeconds { get; set; }
#nullable restore
#else
            [QueryParameter("sinceTime%2Eseconds")]
            public string SinceTimeSeconds { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tailLines")]
            public string? TailLines { get; set; }
#nullable restore
#else
            [QueryParameter("tailLines")]
            public string TailLines { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("untilTime")]
            public string? UntilTime { get; set; }
#nullable restore
#else
            [QueryParameter("untilTime")]
            public string UntilTime { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.Item.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
