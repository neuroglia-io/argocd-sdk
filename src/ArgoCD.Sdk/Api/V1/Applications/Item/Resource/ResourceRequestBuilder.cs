// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Actions;
using ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links;
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applications.Item.Resource
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applications\{applicationMetadataName-id}\resource
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ResourceRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Actions.ActionsRequestBuilder Actions
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The links property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder Links
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResourceRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/resource{?appNamespace*,force*,group*,kind*,namespace*,orphan*,patchType*,project*,resourceName*,version*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResourceRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/resource{?appNamespace*,force*,group*,kind*,namespace*,orphan*,patchType*,project*,resourceName*,version*}", rawUrl)
        {
        }
        /// <summary>
        /// DeleteResource deletes a single application resource
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.ApplicationApplicationResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse?> DeleteAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse> DeleteAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse>(requestInfo, global::ArgoCD.Sdk.Models.ApplicationApplicationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// GetResource returns single application resource
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse>(requestInfo, global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// PatchResource patch single application resource
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse?> PostAsync(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse> PostAsync(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(string.IsNullOrEmpty(body)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse>(requestInfo, global::ArgoCD.Sdk.Models.ApplicationApplicationResourceResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// DeleteResource deletes a single application resource
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// GetResource returns single application resource
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// PatchResource patch single application resource
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(string body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            if(string.IsNullOrEmpty(body)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromScalar(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// DeleteResource deletes a single application resource
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderDeleteQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
            [QueryParameter("force")]
            public bool? Force { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("group")]
            public string? Group { get; set; }
#nullable restore
#else
            [QueryParameter("group")]
            public string Group { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("namespace")]
            public string? Namespace { get; set; }
#nullable restore
#else
            [QueryParameter("namespace")]
            public string Namespace { get; set; }
#endif
            [QueryParameter("orphan")]
            public bool? Orphan { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceName")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resourceName")]
            public string ResourceName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("version")]
            public string? Version { get; set; }
#nullable restore
#else
            [QueryParameter("version")]
            public string Version { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// GetResource returns single application resource
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("group")]
            public string? Group { get; set; }
#nullable restore
#else
            [QueryParameter("group")]
            public string Group { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("namespace")]
            public string? Namespace { get; set; }
#nullable restore
#else
            [QueryParameter("namespace")]
            public string Namespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceName")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resourceName")]
            public string ResourceName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("version")]
            public string? Version { get; set; }
#nullable restore
#else
            [QueryParameter("version")]
            public string Version { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// PatchResource patch single application resource
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderPostQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("group")]
            public string? Group { get; set; }
#nullable restore
#else
            [QueryParameter("group")]
            public string Group { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("namespace")]
            public string? Namespace { get; set; }
#nullable restore
#else
            [QueryParameter("namespace")]
            public string Namespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("patchType")]
            public string? PatchType { get; set; }
#nullable restore
#else
            [QueryParameter("patchType")]
            public string PatchType { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceName")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resourceName")]
            public string ResourceName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("version")]
            public string? Version { get; set; }
#nullable restore
#else
            [QueryParameter("version")]
            public string Version { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourceRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder.ResourceRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
