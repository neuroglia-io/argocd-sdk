// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applications\{applicationMetadataName-id}\resource\links
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LinksRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LinksRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/resource/links{?appNamespace*,group*,kind*,namespace*,project*,resourceName*,version*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LinksRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}/resource/links{?appNamespace*,group*,kind*,namespace*,project*,resourceName*,version*}", rawUrl)
        {
        }
        /// <summary>
        /// ListResourceLinks returns the list of all resource deep links
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.ApplicationLinksResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.ApplicationLinksResponse?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder.LinksRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.ApplicationLinksResponse> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder.LinksRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.ApplicationLinksResponse>(requestInfo, global::ArgoCD.Sdk.Models.ApplicationLinksResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// ListResourceLinks returns the list of all resource deep links
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder.LinksRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder.LinksRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// ListResourceLinks returns the list of all resource deep links
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LinksRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("group")]
            public string? Group { get; set; }
#nullable restore
#else
            [QueryParameter("group")]
            public string Group { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("namespace")]
            public string? Namespace { get; set; }
#nullable restore
#else
            [QueryParameter("namespace")]
            public string Namespace { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceName")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resourceName")]
            public string ResourceName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("version")]
            public string? Version { get; set; }
#nullable restore
#else
            [QueryParameter("version")]
            public string Version { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LinksRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.Links.LinksRequestBuilder.LinksRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
