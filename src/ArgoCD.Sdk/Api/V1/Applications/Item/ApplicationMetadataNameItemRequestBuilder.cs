// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Api.V1.Applications.Item.Events;
using ArgoCD.Sdk.Api.V1.Applications.Item.Links;
using ArgoCD.Sdk.Api.V1.Applications.Item.Logs;
using ArgoCD.Sdk.Api.V1.Applications.Item.ManagedResources;
using ArgoCD.Sdk.Api.V1.Applications.Item.Manifests;
using ArgoCD.Sdk.Api.V1.Applications.Item.Operation;
using ArgoCD.Sdk.Api.V1.Applications.Item.Pods;
using ArgoCD.Sdk.Api.V1.Applications.Item.Resource;
using ArgoCD.Sdk.Api.V1.Applications.Item.ResourceTree;
using ArgoCD.Sdk.Api.V1.Applications.Item.Revisions;
using ArgoCD.Sdk.Api.V1.Applications.Item.Rollback;
using ArgoCD.Sdk.Api.V1.Applications.Item.Spec;
using ArgoCD.Sdk.Api.V1.Applications.Item.Sync;
using ArgoCD.Sdk.Api.V1.Applications.Item.Syncwindows;
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applications.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applications\{applicationMetadataName-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApplicationMetadataNameItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The events property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Events.EventsRequestBuilder Events
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The links property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Links.LinksRequestBuilder Links
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Links.LinksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logs property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Logs.LogsRequestBuilder Logs
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Logs.LogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The managedResources property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.ManagedResources.ManagedResourcesRequestBuilder ManagedResources
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.ManagedResources.ManagedResourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The manifests property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Manifests.ManifestsRequestBuilder Manifests
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Manifests.ManifestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The operation property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Operation.OperationRequestBuilder Operation
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Operation.OperationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pods property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.PodsRequestBuilder Pods
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Pods.PodsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resource property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder Resource
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Resource.ResourceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resourceTree property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.ResourceTree.ResourceTreeRequestBuilder ResourceTree
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.ResourceTree.ResourceTreeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The revisions property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Revisions.RevisionsRequestBuilder Revisions
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Revisions.RevisionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rollback property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Rollback.RollbackRequestBuilder Rollback
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Rollback.RollbackRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The spec property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Spec.SpecRequestBuilder Spec
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Spec.SpecRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sync property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Sync.SyncRequestBuilder Sync
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Sync.SyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The syncwindows property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.Syncwindows.SyncwindowsRequestBuilder Syncwindows
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.Item.Syncwindows.SyncwindowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationMetadataNameItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}{?appNamespace*,cascade*,project*,projects*,propagationPolicy*,refresh*,repo*,resourceVersion*,selector*,validate*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationMetadataNameItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications/{applicationMetadataName%2Did}{?appNamespace*,cascade*,project*,projects*,propagationPolicy*,refresh*,repo*,resourceVersion*,selector*,validate*}", rawUrl)
        {
        }
        /// <summary>
        /// Delete deletes an application
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.ApplicationApplicationResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse?> DeleteAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse> DeleteAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.ApplicationApplicationResponse>(requestInfo, global::ArgoCD.Sdk.Models.ApplicationApplicationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get returns an application by name
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1Application"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1Application>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1Application.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Patch patch an application
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1Application"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application?> PatchAsync(global::ArgoCD.Sdk.Models.ApplicationApplicationPatchRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application> PatchAsync(global::ArgoCD.Sdk.Models.ApplicationApplicationPatchRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1Application>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1Application.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update updates an application
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1Application"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application?> PutAsync(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application> PutAsync(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1Application>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1Application.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete deletes an application
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get returns an application by name
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Patch patch an application
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::ArgoCD.Sdk.Models.ApplicationApplicationPatchRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::ArgoCD.Sdk.Models.ApplicationApplicationPatchRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Update updates an application
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Delete deletes an application
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
            [QueryParameter("cascade")]
            public bool? Cascade { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("propagationPolicy")]
            public string? PropagationPolicy { get; set; }
#nullable restore
#else
            [QueryParameter("propagationPolicy")]
            public string PropagationPolicy { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// Get returns an application by name
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderGetQueryParameters 
        {
            /// <summary>the application&apos;s namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
            /// <summary>the project names to restrict returned list applications (legacy name for backwards-compatibility).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string[]? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string[] Project { get; set; }
#endif
            /// <summary>the project names to restrict returned list applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("projects")]
            public string[]? Projects { get; set; }
#nullable restore
#else
            [QueryParameter("projects")]
            public string[] Projects { get; set; }
#endif
            /// <summary>forces application reconciliation if set to &apos;hard&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("refresh")]
            public string? Refresh { get; set; }
#nullable restore
#else
            [QueryParameter("refresh")]
            public string Refresh { get; set; }
#endif
            /// <summary>the repoURL to restrict returned list applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("repo")]
            public string? Repo { get; set; }
#nullable restore
#else
            [QueryParameter("repo")]
            public string Repo { get; set; }
#endif
            /// <summary>when specified with a watch call, shows changes that occur after that particular version of a resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceVersion")]
            public string? ResourceVersion { get; set; }
#nullable restore
#else
            [QueryParameter("resourceVersion")]
            public string ResourceVersion { get; set; }
#endif
            /// <summary>the selector to restrict returned list to applications only with matched labels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("selector")]
            public string? Selector { get; set; }
#nullable restore
#else
            [QueryParameter("selector")]
            public string Selector { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Update updates an application
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderPutQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
            [QueryParameter("validate")]
            public bool? Validate { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationMetadataNameItemRequestBuilderPutRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder.ApplicationMetadataNameItemRequestBuilderPutQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
