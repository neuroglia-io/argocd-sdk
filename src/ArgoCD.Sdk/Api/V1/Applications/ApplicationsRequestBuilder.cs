// <auto-generated/>
#pragma warning disable CS0618
using ArgoCD.Sdk.Api.V1.Applications.Item;
using ArgoCD.Sdk.Api.V1.Applications.ManifestsWithFiles;
using ArgoCD.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ArgoCD.Sdk.Api.V1.Applications
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v1\applications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApplicationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The manifestsWithFiles property</summary>
        public global::ArgoCD.Sdk.Api.V1.Applications.ManifestsWithFiles.ManifestsWithFilesRequestBuilder ManifestsWithFiles
        {
            get => new global::ArgoCD.Sdk.Api.V1.Applications.ManifestsWithFiles.ManifestsWithFilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ArgoCD.Sdk.api.v1.applications.item collection</summary>
        /// <param name="position">Name must be unique within a namespace. Is required when creating resources, althoughsome resources may allow a client to request the generation of an appropriate nameautomatically. Name is primarily intended for creation idempotence and configurationdefinition.Cannot be updated.More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names+optional</param>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder"/></returns>
        public global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("applicationMetadataName%2Did", position);
                return new global::ArgoCD.Sdk.Api.V1.Applications.Item.ApplicationMetadataNameItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications{?appNamespace*,name*,project*,projects*,refresh*,repo*,resourceVersion*,selector*,upsert*,validate*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v1/applications{?appNamespace*,name*,project*,projects*,refresh*,repo*,resourceVersion*,selector*,upsert*,validate*}", rawUrl)
        {
        }
        /// <summary>
        /// List returns list of applications
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationList?> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1ApplicationList> GetAsync(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1ApplicationList>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1ApplicationList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create creates an application
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1Application"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ArgoCD.Sdk.Models.RuntimeError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application?> PostAsync(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ArgoCD.Sdk.Models.V1alpha1Application> PostAsync(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::ArgoCD.Sdk.Models.RuntimeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ArgoCD.Sdk.Models.V1alpha1Application>(requestInfo, global::ArgoCD.Sdk.Models.V1alpha1Application.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List returns list of applications
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create creates an application
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::ArgoCD.Sdk.Models.V1alpha1Application body, Action<RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List returns list of applications
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsRequestBuilderGetQueryParameters 
        {
            /// <summary>the application&apos;s namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appNamespace")]
            public string? AppNamespace { get; set; }
#nullable restore
#else
            [QueryParameter("appNamespace")]
            public string AppNamespace { get; set; }
#endif
            /// <summary>the application&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>the project names to restrict returned list applications (legacy name for backwards-compatibility).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string[]? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string[] Project { get; set; }
#endif
            /// <summary>the project names to restrict returned list applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("projects")]
            public string[]? Projects { get; set; }
#nullable restore
#else
            [QueryParameter("projects")]
            public string[] Projects { get; set; }
#endif
            /// <summary>forces application reconciliation if set to &apos;hard&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("refresh")]
            public string? Refresh { get; set; }
#nullable restore
#else
            [QueryParameter("refresh")]
            public string Refresh { get; set; }
#endif
            /// <summary>the repoURL to restrict returned list applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("repo")]
            public string? Repo { get; set; }
#nullable restore
#else
            [QueryParameter("repo")]
            public string Repo { get; set; }
#endif
            /// <summary>when specified with a watch call, shows changes that occur after that particular version of a resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resourceVersion")]
            public string? ResourceVersion { get; set; }
#nullable restore
#else
            [QueryParameter("resourceVersion")]
            public string ResourceVersion { get; set; }
#endif
            /// <summary>the selector to restrict returned list to applications only with matched labels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("selector")]
            public string? Selector { get; set; }
#nullable restore
#else
            [QueryParameter("selector")]
            public string Selector { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Create creates an application
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsRequestBuilderPostQueryParameters 
        {
            [QueryParameter("upsert")]
            public bool? Upsert { get; set; }
            [QueryParameter("validate")]
            public bool? Validate { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ApplicationsRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ArgoCD.Sdk.Api.V1.Applications.ApplicationsRequestBuilder.ApplicationsRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
