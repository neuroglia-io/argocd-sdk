// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// SyncOperation contains details about a sync operation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1SyncOperation : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The autoHealAttemptsCount property</summary>
        public long? AutoHealAttemptsCount { get; set; }
        /// <summary>The dryRun property</summary>
        public bool? DryRun { get; set; }
        /// <summary>The manifests property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Manifests { get; set; }
#nullable restore
#else
        public List<string> Manifests { get; set; }
#endif
        /// <summary>The prune property</summary>
        public bool? Prune { get; set; }
        /// <summary>The resources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1SyncOperationResource>? Resources { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1SyncOperationResource> Resources { get; set; }
#endif
        /// <summary>Revision is the revision (Git) or chart version (Helm) which to sync the application toIf omitted, will use the revision specified in app spec.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Revision { get; set; }
#nullable restore
#else
        public string Revision { get; set; }
#endif
        /// <summary>Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application toIf omitted, will use the revision specified in app spec.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Revisions { get; set; }
#nullable restore
#else
        public List<string> Revisions { get; set; }
#endif
        /// <summary>The source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource? Source { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource Source { get; set; }
#endif
        /// <summary>The sources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>? Sources { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource> Sources { get; set; }
#endif
        /// <summary>The syncOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SyncOptions { get; set; }
#nullable restore
#else
        public List<string> SyncOptions { get; set; }
#endif
        /// <summary>The syncStrategy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SyncStrategy? SyncStrategy { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SyncStrategy SyncStrategy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1SyncOperation"/> and sets the default values.
        /// </summary>
        public V1alpha1SyncOperation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1SyncOperation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1SyncOperation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1SyncOperation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "autoHealAttemptsCount", n => { AutoHealAttemptsCount = n.GetLongValue(); } },
                { "dryRun", n => { DryRun = n.GetBoolValue(); } },
                { "manifests", n => { Manifests = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "prune", n => { Prune = n.GetBoolValue(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1SyncOperationResource>(global::ArgoCD.Sdk.Models.V1alpha1SyncOperationResource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "revision", n => { Revision = n.GetStringValue(); } },
                { "revisions", n => { Revisions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "source", n => { Source = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource.CreateFromDiscriminatorValue); } },
                { "sources", n => { Sources = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "syncOptions", n => { SyncOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "syncStrategy", n => { SyncStrategy = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncStrategy>(global::ArgoCD.Sdk.Models.V1alpha1SyncStrategy.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("autoHealAttemptsCount", AutoHealAttemptsCount);
            writer.WriteBoolValue("dryRun", DryRun);
            writer.WriteCollectionOfPrimitiveValues<string>("manifests", Manifests);
            writer.WriteBoolValue("prune", Prune);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1SyncOperationResource>("resources", Resources);
            writer.WriteStringValue("revision", Revision);
            writer.WriteCollectionOfPrimitiveValues<string>("revisions", Revisions);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>("source", Source);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>("sources", Sources);
            writer.WriteCollectionOfPrimitiveValues<string>("syncOptions", SyncOptions);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncStrategy>("syncStrategy", SyncStrategy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
