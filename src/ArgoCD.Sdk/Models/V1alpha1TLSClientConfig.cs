// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1TLSClientConfig : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The caData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? CaData { get; set; }
#nullable restore
#else
        public byte[] CaData { get; set; }
#endif
        /// <summary>The certData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? CertData { get; set; }
#nullable restore
#else
        public byte[] CertData { get; set; }
#endif
        /// <summary>Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only.</summary>
        public bool? Insecure { get; set; }
        /// <summary>The keyData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? KeyData { get; set; }
#nullable restore
#else
        public byte[] KeyData { get; set; }
#endif
        /// <summary>ServerName is passed to the server for SNI and is used in the client to check servercertificates against. If ServerName is empty, the hostname used to contact theserver is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerName { get; set; }
#nullable restore
#else
        public string ServerName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig"/> and sets the default values.
        /// </summary>
        public V1alpha1TLSClientConfig()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "caData", n => { CaData = n.GetByteArrayValue(); } },
                { "certData", n => { CertData = n.GetByteArrayValue(); } },
                { "insecure", n => { Insecure = n.GetBoolValue(); } },
                { "keyData", n => { KeyData = n.GetByteArrayValue(); } },
                { "serverName", n => { ServerName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteByteArrayValue("caData", CaData);
            writer.WriteByteArrayValue("certData", CertData);
            writer.WriteBoolValue("insecure", Insecure);
            writer.WriteByteArrayValue("keyData", KeyData);
            writer.WriteStringValue("serverName", ServerName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
