// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1GnuPGPublicKey : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The fingerprint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>The keyData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyData { get; set; }
#nullable restore
#else
        public string KeyData { get; set; }
#endif
        /// <summary>The keyID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyID { get; set; }
#nullable restore
#else
        public string KeyID { get; set; }
#endif
        /// <summary>The owner property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Owner { get; set; }
#nullable restore
#else
        public string Owner { get; set; }
#endif
        /// <summary>The subType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubType { get; set; }
#nullable restore
#else
        public string SubType { get; set; }
#endif
        /// <summary>The trust property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Trust { get; set; }
#nullable restore
#else
        public string Trust { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1GnuPGPublicKey"/> and sets the default values.
        /// </summary>
        public V1alpha1GnuPGPublicKey()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1GnuPGPublicKey"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1GnuPGPublicKey CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1GnuPGPublicKey();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "keyData", n => { KeyData = n.GetStringValue(); } },
                { "keyID", n => { KeyID = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetStringValue(); } },
                { "subType", n => { SubType = n.GetStringValue(); } },
                { "trust", n => { Trust = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("keyData", KeyData);
            writer.WriteStringValue("keyID", KeyID);
            writer.WriteStringValue("owner", Owner);
            writer.WriteStringValue("subType", SubType);
            writer.WriteStringValue("trust", Trust);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
