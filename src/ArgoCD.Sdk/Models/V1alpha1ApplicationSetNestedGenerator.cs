// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ApplicationSetNestedGenerator represents a generator nested within a combination-type generator (MatrixGenerator orMergeGenerator).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1ApplicationSetNestedGenerator : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>DuckType defines a generator to match against clusters registered with ArgoCD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1DuckTypeGenerator? ClusterDecisionResource { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1DuckTypeGenerator ClusterDecisionResource { get; set; }
#endif
        /// <summary>ClusterGenerator defines a generator to match against clusters registered with ArgoCD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterGenerator? Clusters { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterGenerator Clusters { get; set; }
#endif
        /// <summary>The git property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1GitGenerator? Git { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1GitGenerator Git { get; set; }
#endif
        /// <summary>The list property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ListGenerator? List { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ListGenerator List { get; set; }
#endif
        /// <summary>JSON represents any valid JSON value.These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1JSON? Matrix { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1JSON Matrix { get; set; }
#endif
        /// <summary>JSON represents any valid JSON value.These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1JSON? Merge { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1JSON Merge { get; set; }
#endif
        /// <summary>PluginGenerator defines connection info specific to Plugin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1PluginGenerator? Plugin { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1PluginGenerator Plugin { get; set; }
#endif
        /// <summary>PullRequestGenerator defines a generator that scrapes a PullRequest API to find candidate pull requests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1PullRequestGenerator? PullRequest { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1PullRequestGenerator PullRequest { get; set; }
#endif
        /// <summary>SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator? ScmProvider { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator ScmProvider { get; set; }
#endif
        /// <summary>The selector property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1LabelSelector? Selector { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1LabelSelector Selector { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationSetNestedGenerator()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clusterDecisionResource", n => { ClusterDecisionResource = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1DuckTypeGenerator>(global::ArgoCD.Sdk.Models.V1alpha1DuckTypeGenerator.CreateFromDiscriminatorValue); } },
                { "clusters", n => { Clusters = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterGenerator>(global::ArgoCD.Sdk.Models.V1alpha1ClusterGenerator.CreateFromDiscriminatorValue); } },
                { "git", n => { Git = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1GitGenerator>(global::ArgoCD.Sdk.Models.V1alpha1GitGenerator.CreateFromDiscriminatorValue); } },
                { "list", n => { List = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ListGenerator>(global::ArgoCD.Sdk.Models.V1alpha1ListGenerator.CreateFromDiscriminatorValue); } },
                { "matrix", n => { Matrix = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1JSON>(global::ArgoCD.Sdk.Models.V1JSON.CreateFromDiscriminatorValue); } },
                { "merge", n => { Merge = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1JSON>(global::ArgoCD.Sdk.Models.V1JSON.CreateFromDiscriminatorValue); } },
                { "plugin", n => { Plugin = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1PluginGenerator>(global::ArgoCD.Sdk.Models.V1alpha1PluginGenerator.CreateFromDiscriminatorValue); } },
                { "pullRequest", n => { PullRequest = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1PullRequestGenerator>(global::ArgoCD.Sdk.Models.V1alpha1PullRequestGenerator.CreateFromDiscriminatorValue); } },
                { "scmProvider", n => { ScmProvider = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator.CreateFromDiscriminatorValue); } },
                { "selector", n => { Selector = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1LabelSelector>(global::ArgoCD.Sdk.Models.V1LabelSelector.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1DuckTypeGenerator>("clusterDecisionResource", ClusterDecisionResource);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterGenerator>("clusters", Clusters);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1GitGenerator>("git", Git);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ListGenerator>("list", List);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1JSON>("matrix", Matrix);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1JSON>("merge", Merge);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1PluginGenerator>("plugin", Plugin);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1PullRequestGenerator>("pullRequest", PullRequest);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator>("scmProvider", ScmProvider);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1LabelSelector>("selector", Selector);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
