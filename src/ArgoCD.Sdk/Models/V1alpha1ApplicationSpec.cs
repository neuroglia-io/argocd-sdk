// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1ApplicationSpec : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The destination property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationDestination? Destination { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationDestination Destination { get; set; }
#endif
        /// <summary>The ignoreDifferences property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceIgnoreDifferences>? IgnoreDifferences { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceIgnoreDifferences> IgnoreDifferences { get; set; }
#endif
        /// <summary>The info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1Info>? Info { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1Info> Info { get; set; }
#endif
        /// <summary>Project is a reference to the project this application belongs to.The empty string means that application belongs to the &apos;default&apos; project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Project { get; set; }
#nullable restore
#else
        public string Project { get; set; }
#endif
        /// <summary>RevisionHistoryLimit limits the number of items kept in the application&apos;s revision history, which is used for informational purposes as well as for rollbacks to previous versions.This should only be changed in exceptional circumstances.Setting to zero will store no history. This will reduce storage used.Increasing will increase the space used to store the history, so we do not recommend increasing it.Default is 10.</summary>
        public long? RevisionHistoryLimit { get; set; }
        /// <summary>The source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource? Source { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource Source { get; set; }
#endif
        /// <summary>SourceHydrator specifies a dry &quot;don&apos;t repeat yourself&quot; source for manifests, a sync source from which to synchydrated manifests, and an optional hydrateTo location to act as a &quot;staging&quot; aread for hydrated manifests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator? SourceHydrator { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator SourceHydrator { get; set; }
#endif
        /// <summary>The sources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>? Sources { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource> Sources { get; set; }
#endif
        /// <summary>The syncPolicy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SyncPolicy? SyncPolicy { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SyncPolicy SyncPolicy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSpec"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationSpec()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSpec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationSpec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationSpec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "destination", n => { Destination = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationDestination>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationDestination.CreateFromDiscriminatorValue); } },
                { "ignoreDifferences", n => { IgnoreDifferences = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceIgnoreDifferences>(global::ArgoCD.Sdk.Models.V1alpha1ResourceIgnoreDifferences.CreateFromDiscriminatorValue)?.AsList(); } },
                { "info", n => { Info = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1Info>(global::ArgoCD.Sdk.Models.V1alpha1Info.CreateFromDiscriminatorValue)?.AsList(); } },
                { "project", n => { Project = n.GetStringValue(); } },
                { "revisionHistoryLimit", n => { RevisionHistoryLimit = n.GetLongValue(); } },
                { "source", n => { Source = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource.CreateFromDiscriminatorValue); } },
                { "sourceHydrator", n => { SourceHydrator = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator>(global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator.CreateFromDiscriminatorValue); } },
                { "sources", n => { Sources = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "syncPolicy", n => { SyncPolicy = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncPolicy>(global::ArgoCD.Sdk.Models.V1alpha1SyncPolicy.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationDestination>("destination", Destination);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceIgnoreDifferences>("ignoreDifferences", IgnoreDifferences);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1Info>("info", Info);
            writer.WriteStringValue("project", Project);
            writer.WriteLongValue("revisionHistoryLimit", RevisionHistoryLimit);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>("source", Source);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator>("sourceHydrator", SourceHydrator);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource>("sources", Sources);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncPolicy>("syncPolicy", SyncPolicy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
