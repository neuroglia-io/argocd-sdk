// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// SourceHydrator specifies a dry &quot;don&apos;t repeat yourself&quot; source for manifests, a sync source from which to synchydrated manifests, and an optional hydrateTo location to act as a &quot;staging&quot; aread for hydrated manifests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1SourceHydrator : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>DrySource specifies a location for dry &quot;don&apos;t repeat yourself&quot; manifest source information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1DrySource? DrySource { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1DrySource DrySource { get; set; }
#endif
        /// <summary>HydrateTo specifies a location to which hydrated manifests should be pushed as a &quot;staging area&quot; before being moved tothe SyncSource. The RepoURL and Path are assumed based on the associated SyncSource config in the SourceHydrator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1HydrateTo? HydrateTo { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1HydrateTo HydrateTo { get; set; }
#endif
        /// <summary>SyncSource specifies a location from which hydrated manifests may be synced. RepoURL is assumed based on theassociated DrySource config in the SourceHydrator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SyncSource? SyncSource { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SyncSource SyncSource { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator"/> and sets the default values.
        /// </summary>
        public V1alpha1SourceHydrator()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "drySource", n => { DrySource = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1DrySource>(global::ArgoCD.Sdk.Models.V1alpha1DrySource.CreateFromDiscriminatorValue); } },
                { "hydrateTo", n => { HydrateTo = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1HydrateTo>(global::ArgoCD.Sdk.Models.V1alpha1HydrateTo.CreateFromDiscriminatorValue); } },
                { "syncSource", n => { SyncSource = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncSource>(global::ArgoCD.Sdk.Models.V1alpha1SyncSource.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1DrySource>("drySource", DrySource);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1HydrateTo>("hydrateTo", HydrateTo);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncSource>("syncSource", SyncSource);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
