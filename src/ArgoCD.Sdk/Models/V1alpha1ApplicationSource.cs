// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1ApplicationSource : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Chart { get; set; }
#nullable restore
#else
        public string Chart { get; set; }
#endif
        /// <summary>The directory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceDirectory? Directory { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceDirectory Directory { get; set; }
#endif
        /// <summary>The helm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm? Helm { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm Helm { get; set; }
#endif
        /// <summary>The kustomize property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize? Kustomize { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize Kustomize { get; set; }
#endif
        /// <summary>Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Path is a directory path within the Git repository, and is only valid for applications sourced from Git.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The plugin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourcePlugin? Plugin { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourcePlugin Plugin { get; set; }
#endif
        /// <summary>Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ref { get; set; }
#nullable restore
#else
        public string Ref { get; set; }
#endif
        /// <summary>The repoURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepoURL { get; set; }
#nullable restore
#else
        public string RepoURL { get; set; }
#endif
        /// <summary>TargetRevision defines the revision of the source to sync the application to.In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.In case of Helm, this is a semver tag for the Chart&apos;s version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetRevision { get; set; }
#nullable restore
#else
        public string TargetRevision { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationSource()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationSource();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "chart", n => { Chart = n.GetStringValue(); } },
                { "directory", n => { Directory = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceDirectory>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceDirectory.CreateFromDiscriminatorValue); } },
                { "helm", n => { Helm = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm.CreateFromDiscriminatorValue); } },
                { "kustomize", n => { Kustomize = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "plugin", n => { Plugin = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourcePlugin>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourcePlugin.CreateFromDiscriminatorValue); } },
                { "ref", n => { Ref = n.GetStringValue(); } },
                { "repoURL", n => { RepoURL = n.GetStringValue(); } },
                { "targetRevision", n => { TargetRevision = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("chart", Chart);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceDirectory>("directory", Directory);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm>("helm", Helm);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize>("kustomize", Kustomize);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("path", Path);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourcePlugin>("plugin", Plugin);
            writer.WriteStringValue("ref", Ref);
            writer.WriteStringValue("repoURL", RepoURL);
            writer.WriteStringValue("targetRevision", TargetRevision);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
