// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ClusterConfig is the configuration attributes. This structure is subset of the go-clientrest.Config with annotations added for marshalling.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1ClusterConfig : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The awsAuthConfig property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1AWSAuthConfig? AwsAuthConfig { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1AWSAuthConfig AwsAuthConfig { get; set; }
#endif
        /// <summary>Server requires Bearer authentication. This client will not attempt to userefresh tokens for an OAuth2 flow.TODO: demonstrate an OAuth2 compatible client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BearerToken { get; set; }
#nullable restore
#else
        public string BearerToken { get; set; }
#endif
        /// <summary>DisableCompression bypasses automatic GZip compression requests to the server.</summary>
        public bool? DisableCompression { get; set; }
        /// <summary>The execProviderConfig property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ExecProviderConfig? ExecProviderConfig { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ExecProviderConfig ExecProviderConfig { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The proxyUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProxyUrl { get; set; }
#nullable restore
#else
        public string ProxyUrl { get; set; }
#endif
        /// <summary>The tlsClientConfig property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig? TlsClientConfig { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig TlsClientConfig { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig"/> and sets the default values.
        /// </summary>
        public V1alpha1ClusterConfig()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awsAuthConfig", n => { AwsAuthConfig = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1AWSAuthConfig>(global::ArgoCD.Sdk.Models.V1alpha1AWSAuthConfig.CreateFromDiscriminatorValue); } },
                { "bearerToken", n => { BearerToken = n.GetStringValue(); } },
                { "disableCompression", n => { DisableCompression = n.GetBoolValue(); } },
                { "execProviderConfig", n => { ExecProviderConfig = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ExecProviderConfig>(global::ArgoCD.Sdk.Models.V1alpha1ExecProviderConfig.CreateFromDiscriminatorValue); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "proxyUrl", n => { ProxyUrl = n.GetStringValue(); } },
                { "tlsClientConfig", n => { TlsClientConfig = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig>(global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig.CreateFromDiscriminatorValue); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1AWSAuthConfig>("awsAuthConfig", AwsAuthConfig);
            writer.WriteStringValue("bearerToken", BearerToken);
            writer.WriteBoolValue("disableCompression", DisableCompression);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ExecProviderConfig>("execProviderConfig", ExecProviderConfig);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("proxyUrl", ProxyUrl);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1TLSClientConfig>("tlsClientConfig", TlsClientConfig);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
