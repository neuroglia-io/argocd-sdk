// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versionedstruct, and Object in your internal struct. You also need to register yourvarious plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:&quot;,inline&quot;`MyPlugin runtime.Object `json:&quot;myPlugin&quot;`}type PluginA struct {AOption string `json:&quot;aOption&quot;`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:&quot;,inline&quot;`MyPlugin runtime.RawExtension `json:&quot;myPlugin&quot;`}type PluginA struct {AOption string `json:&quot;aOption&quot;`}// On the wire, the JSON will look something like this:{&quot;kind&quot;:&quot;MyAPIObject&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;myPlugin&quot;: {&quot;kind&quot;:&quot;PluginA&quot;,&quot;aOption&quot;:&quot;foo&quot;,},}So what happens? Decode first uses json or yaml to unmarshal the serialized data intoyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.The next step is to copy (using pkg/conversion) into the internal struct. The runtimepackage&apos;s DefaultScheme has conversion functions installed which will unpack theJSON stored in RawExtension, turning it into the correct object type, and storing itin the Object. (TODO: In the case where the object is of an unknown type, aruntime.Unknown object will be created and stored.)+k8s:deepcopy-gen=true+protobuf=true+k8s:openapi-gen=true
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RuntimeRawExtension : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Raw is the underlying serialization of this object.TODO: Determine how to detect ContentType and ContentEncoding of &apos;Raw&apos; data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Raw { get; set; }
#nullable restore
#else
        public byte[] Raw { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.RuntimeRawExtension"/> and sets the default values.
        /// </summary>
        public RuntimeRawExtension()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.RuntimeRawExtension"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.RuntimeRawExtension CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.RuntimeRawExtension();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "raw", n => { Raw = n.GetByteArrayValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteByteArrayValue("raw", Raw);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
