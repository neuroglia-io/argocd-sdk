// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1ApplicationStatus : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The conditions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationCondition>? Conditions { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationCondition> Conditions { get; set; }
#endif
        /// <summary>The controllerNamespace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ControllerNamespace { get; set; }
#nullable restore
#else
        public string ControllerNamespace { get; set; }
#endif
        /// <summary>The health property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1AppHealthStatus? Health { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1AppHealthStatus Health { get; set; }
#endif
        /// <summary>The history property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1RevisionHistory>? History { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1RevisionHistory> History { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? ObservedAt { get; set; }
        /// <summary>The operationState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1OperationState? OperationState { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1OperationState OperationState { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? ReconciledAt { get; set; }
        /// <summary>The resourceHealthSource property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceHealthSource { get; set; }
#nullable restore
#else
        public string ResourceHealthSource { get; set; }
#endif
        /// <summary>The resources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus>? Resources { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus> Resources { get; set; }
#endif
        /// <summary>The sourceHydrator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydratorStatus? SourceHydrator { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydratorStatus SourceHydrator { get; set; }
#endif
        /// <summary>The sourceType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceType { get; set; }
#nullable restore
#else
        public string SourceType { get; set; }
#endif
        /// <summary>The sourceTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SourceTypes { get; set; }
#nullable restore
#else
        public List<string> SourceTypes { get; set; }
#endif
        /// <summary>The summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSummary? Summary { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSummary Summary { get; set; }
#endif
        /// <summary>The sync property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SyncStatus? Sync { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SyncStatus Sync { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationStatus"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationStatus()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "conditions", n => { Conditions = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationCondition>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationCondition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "controllerNamespace", n => { ControllerNamespace = n.GetStringValue(); } },
                { "health", n => { Health = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1AppHealthStatus>(global::ArgoCD.Sdk.Models.V1alpha1AppHealthStatus.CreateFromDiscriminatorValue); } },
                { "history", n => { History = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1RevisionHistory>(global::ArgoCD.Sdk.Models.V1alpha1RevisionHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "observedAt", n => { ObservedAt = n.GetDateTimeOffsetValue(); } },
                { "operationState", n => { OperationState = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1OperationState>(global::ArgoCD.Sdk.Models.V1alpha1OperationState.CreateFromDiscriminatorValue); } },
                { "reconciledAt", n => { ReconciledAt = n.GetDateTimeOffsetValue(); } },
                { "resourceHealthSource", n => { ResourceHealthSource = n.GetStringValue(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus>(global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sourceHydrator", n => { SourceHydrator = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydratorStatus>(global::ArgoCD.Sdk.Models.V1alpha1SourceHydratorStatus.CreateFromDiscriminatorValue); } },
                { "sourceType", n => { SourceType = n.GetStringValue(); } },
                { "sourceTypes", n => { SourceTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "summary", n => { Summary = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSummary>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSummary.CreateFromDiscriminatorValue); } },
                { "sync", n => { Sync = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncStatus>(global::ArgoCD.Sdk.Models.V1alpha1SyncStatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationCondition>("conditions", Conditions);
            writer.WriteStringValue("controllerNamespace", ControllerNamespace);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1AppHealthStatus>("health", Health);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1RevisionHistory>("history", History);
            writer.WriteDateTimeOffsetValue("observedAt", ObservedAt);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1OperationState>("operationState", OperationState);
            writer.WriteDateTimeOffsetValue("reconciledAt", ReconciledAt);
            writer.WriteStringValue("resourceHealthSource", ResourceHealthSource);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus>("resources", Resources);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydratorStatus>("sourceHydrator", SourceHydrator);
            writer.WriteStringValue("sourceType", SourceType);
            writer.WriteCollectionOfPrimitiveValues<string>("sourceTypes", SourceTypes);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSummary>("summary", Summary);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SyncStatus>("sync", Sync);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
