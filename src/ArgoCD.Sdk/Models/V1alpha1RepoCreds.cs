// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1RepoCreds : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bearerToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BearerToken { get; set; }
#nullable restore
#else
        public string BearerToken { get; set; }
#endif
        /// <summary>The enableOCI property</summary>
        public bool? EnableOCI { get; set; }
        /// <summary>The forceHttpBasicAuth property</summary>
        public bool? ForceHttpBasicAuth { get; set; }
        /// <summary>The gcpServiceAccountKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GcpServiceAccountKey { get; set; }
#nullable restore
#else
        public string GcpServiceAccountKey { get; set; }
#endif
        /// <summary>The githubAppEnterpriseBaseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GithubAppEnterpriseBaseUrl { get; set; }
#nullable restore
#else
        public string GithubAppEnterpriseBaseUrl { get; set; }
#endif
        /// <summary>The githubAppID property</summary>
        public long? GithubAppID { get; set; }
        /// <summary>The githubAppInstallationID property</summary>
        public long? GithubAppInstallationID { get; set; }
        /// <summary>The githubAppPrivateKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GithubAppPrivateKey { get; set; }
#nullable restore
#else
        public string GithubAppPrivateKey { get; set; }
#endif
        /// <summary>InsecureOCIForceHttp specifies whether the connection to the repository uses TLS at _all_. If true, no TLS. This flag is applicable for OCI repos only.</summary>
        public bool? InsecureOCIForceHttp { get; set; }
        /// <summary>The noProxy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NoProxy { get; set; }
#nullable restore
#else
        public string NoProxy { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The proxy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Proxy { get; set; }
#nullable restore
#else
        public string Proxy { get; set; }
#endif
        /// <summary>The sshPrivateKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SshPrivateKey { get; set; }
#nullable restore
#else
        public string SshPrivateKey { get; set; }
#endif
        /// <summary>The tlsClientCertData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TlsClientCertData { get; set; }
#nullable restore
#else
        public string TlsClientCertData { get; set; }
#endif
        /// <summary>The tlsClientCertKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TlsClientCertKey { get; set; }
#nullable restore
#else
        public string TlsClientCertKey { get; set; }
#endif
        /// <summary>Type specifies the type of the repoCreds. Can be either &quot;git&quot; or &quot;helm. &quot;git&quot; is assumed if empty or absent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The useAzureWorkloadIdentity property</summary>
        public bool? UseAzureWorkloadIdentity { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1RepoCreds"/> and sets the default values.
        /// </summary>
        public V1alpha1RepoCreds()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1RepoCreds"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1RepoCreds CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1RepoCreds();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bearerToken", n => { BearerToken = n.GetStringValue(); } },
                { "enableOCI", n => { EnableOCI = n.GetBoolValue(); } },
                { "forceHttpBasicAuth", n => { ForceHttpBasicAuth = n.GetBoolValue(); } },
                { "gcpServiceAccountKey", n => { GcpServiceAccountKey = n.GetStringValue(); } },
                { "githubAppEnterpriseBaseUrl", n => { GithubAppEnterpriseBaseUrl = n.GetStringValue(); } },
                { "githubAppID", n => { GithubAppID = n.GetLongValue(); } },
                { "githubAppInstallationID", n => { GithubAppInstallationID = n.GetLongValue(); } },
                { "githubAppPrivateKey", n => { GithubAppPrivateKey = n.GetStringValue(); } },
                { "insecureOCIForceHttp", n => { InsecureOCIForceHttp = n.GetBoolValue(); } },
                { "noProxy", n => { NoProxy = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "proxy", n => { Proxy = n.GetStringValue(); } },
                { "sshPrivateKey", n => { SshPrivateKey = n.GetStringValue(); } },
                { "tlsClientCertData", n => { TlsClientCertData = n.GetStringValue(); } },
                { "tlsClientCertKey", n => { TlsClientCertKey = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "useAzureWorkloadIdentity", n => { UseAzureWorkloadIdentity = n.GetBoolValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bearerToken", BearerToken);
            writer.WriteBoolValue("enableOCI", EnableOCI);
            writer.WriteBoolValue("forceHttpBasicAuth", ForceHttpBasicAuth);
            writer.WriteStringValue("gcpServiceAccountKey", GcpServiceAccountKey);
            writer.WriteStringValue("githubAppEnterpriseBaseUrl", GithubAppEnterpriseBaseUrl);
            writer.WriteLongValue("githubAppID", GithubAppID);
            writer.WriteLongValue("githubAppInstallationID", GithubAppInstallationID);
            writer.WriteStringValue("githubAppPrivateKey", GithubAppPrivateKey);
            writer.WriteBoolValue("insecureOCIForceHttp", InsecureOCIForceHttp);
            writer.WriteStringValue("noProxy", NoProxy);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("proxy", Proxy);
            writer.WriteStringValue("sshPrivateKey", SshPrivateKey);
            writer.WriteStringValue("tlsClientCertData", TlsClientCertData);
            writer.WriteStringValue("tlsClientCertKey", TlsClientCertKey);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("url", Url);
            writer.WriteBoolValue("useAzureWorkloadIdentity", UseAzureWorkloadIdentity);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
