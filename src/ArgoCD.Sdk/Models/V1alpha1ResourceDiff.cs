// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ResourceDiff holds the diff between a live and target resource object in Argo CD.It is used to compare the desired state (from Git/Helm) with the actual state in the cluster.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1ResourceDiff : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Diff contains the JSON patch representing the difference between the live and target resource.Deprecated: Use NormalizedLiveState and PredictedLiveState instead to compute differences.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Diff { get; set; }
#nullable restore
#else
        public string Diff { get; set; }
#endif
        /// <summary>Group represents the API group of the resource (e.g., &quot;apps&quot; for Deployments).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>Hook indicates whether this resource is a hook resource (e.g., pre-sync or post-sync hooks).</summary>
        public bool? Hook { get; set; }
        /// <summary>Kind represents the Kubernetes resource kind (e.g., &quot;Deployment&quot;, &quot;Service&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kind { get; set; }
#nullable restore
#else
        public string Kind { get; set; }
#endif
        /// <summary>LiveState contains the JSON-serialized resource manifest of the resource currently running in the cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LiveState { get; set; }
#nullable restore
#else
        public string LiveState { get; set; }
#endif
        /// <summary>Modified indicates whether the live resource has changes compared to the target resource.</summary>
        public bool? Modified { get; set; }
        /// <summary>Name is the name of the resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Namespace specifies the namespace where the resource exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Namespace { get; set; }
#nullable restore
#else
        public string Namespace { get; set; }
#endif
        /// <summary>NormalizedLiveState contains the JSON-serialized live resource state after applying normalizations.Normalizations may include ignoring irrelevant fields like timestamps or defaults applied by Kubernetes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NormalizedLiveState { get; set; }
#nullable restore
#else
        public string NormalizedLiveState { get; set; }
#endif
        /// <summary>PredictedLiveState contains the JSON-serialized resource state that Argo CD predicts based on thecombination of the normalized live state and the desired target state.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PredictedLiveState { get; set; }
#nullable restore
#else
        public string PredictedLiveState { get; set; }
#endif
        /// <summary>ResourceVersion is the Kubernetes resource version, which helps in tracking changes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceVersion { get; set; }
#nullable restore
#else
        public string ResourceVersion { get; set; }
#endif
        /// <summary>TargetState contains the JSON-serialized resource manifest as defined in the Git/Helm repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetState { get; set; }
#nullable restore
#else
        public string TargetState { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ResourceDiff"/> and sets the default values.
        /// </summary>
        public V1alpha1ResourceDiff()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ResourceDiff"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ResourceDiff CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ResourceDiff();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "diff", n => { Diff = n.GetStringValue(); } },
                { "group", n => { Group = n.GetStringValue(); } },
                { "hook", n => { Hook = n.GetBoolValue(); } },
                { "kind", n => { Kind = n.GetStringValue(); } },
                { "liveState", n => { LiveState = n.GetStringValue(); } },
                { "modified", n => { Modified = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "namespace", n => { Namespace = n.GetStringValue(); } },
                { "normalizedLiveState", n => { NormalizedLiveState = n.GetStringValue(); } },
                { "predictedLiveState", n => { PredictedLiveState = n.GetStringValue(); } },
                { "resourceVersion", n => { ResourceVersion = n.GetStringValue(); } },
                { "targetState", n => { TargetState = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("diff", Diff);
            writer.WriteStringValue("group", Group);
            writer.WriteBoolValue("hook", Hook);
            writer.WriteStringValue("kind", Kind);
            writer.WriteStringValue("liveState", LiveState);
            writer.WriteBoolValue("modified", Modified);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("namespace", Namespace);
            writer.WriteStringValue("normalizedLiveState", NormalizedLiveState);
            writer.WriteStringValue("predictedLiveState", PredictedLiveState);
            writer.WriteStringValue("resourceVersion", ResourceVersion);
            writer.WriteStringValue("targetState", TargetState);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
