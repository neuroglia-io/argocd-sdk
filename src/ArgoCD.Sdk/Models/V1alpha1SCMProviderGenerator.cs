// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1SCMProviderGenerator : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>SCMProviderGeneratorAWSCodeCommit defines connection info specific to AWS CodeCommit.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAWSCodeCommit? AwsCodeCommit { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAWSCodeCommit AwsCodeCommit { get; set; }
#endif
        /// <summary>SCMProviderGeneratorAzureDevOps defines connection info specific to Azure DevOps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAzureDevOps? AzureDevOps { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAzureDevOps AzureDevOps { get; set; }
#endif
        /// <summary>SCMProviderGeneratorBitbucket defines connection info specific to Bitbucket Cloud (API version 2).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucket? Bitbucket { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucket Bitbucket { get; set; }
#endif
        /// <summary>SCMProviderGeneratorBitbucketServer defines connection info specific to Bitbucket Server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucketServer? BitbucketServer { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucketServer BitbucketServer { get; set; }
#endif
        /// <summary>Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providersnecessarily support all protocols.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloneProtocol { get; set; }
#nullable restore
#else
        public string CloneProtocol { get; set; }
#endif
        /// <summary>Filters for which repos should be considered.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter>? Filters { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter> Filters { get; set; }
#endif
        /// <summary>SCMProviderGeneratorGitea defines a connection info specific to Gitea.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitea? Gitea { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitea Gitea { get; set; }
#endif
        /// <summary>SCMProviderGeneratorGithub defines connection info specific to GitHub.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGithub? Github { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGithub Github { get; set; }
#endif
        /// <summary>SCMProviderGeneratorGitlab defines connection info specific to Gitlab.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitlab? Gitlab { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitlab Gitlab { get; set; }
#endif
        /// <summary>Standard parameters.</summary>
        public long? RequeueAfterSeconds { get; set; }
        /// <summary>The template property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate? Template { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate Template { get; set; }
#endif
        /// <summary>The values property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator_values? Values { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator_values Values { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator"/> and sets the default values.
        /// </summary>
        public V1alpha1SCMProviderGenerator()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awsCodeCommit", n => { AwsCodeCommit = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAWSCodeCommit>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAWSCodeCommit.CreateFromDiscriminatorValue); } },
                { "azureDevOps", n => { AzureDevOps = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAzureDevOps>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAzureDevOps.CreateFromDiscriminatorValue); } },
                { "bitbucket", n => { Bitbucket = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucket>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucket.CreateFromDiscriminatorValue); } },
                { "bitbucketServer", n => { BitbucketServer = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucketServer>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucketServer.CreateFromDiscriminatorValue); } },
                { "cloneProtocol", n => { CloneProtocol = n.GetStringValue(); } },
                { "filters", n => { Filters = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "gitea", n => { Gitea = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitea>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitea.CreateFromDiscriminatorValue); } },
                { "github", n => { Github = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGithub>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGithub.CreateFromDiscriminatorValue); } },
                { "gitlab", n => { Gitlab = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitlab>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitlab.CreateFromDiscriminatorValue); } },
                { "requeueAfterSeconds", n => { RequeueAfterSeconds = n.GetLongValue(); } },
                { "template", n => { Template = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate.CreateFromDiscriminatorValue); } },
                { "values", n => { Values = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator_values>(global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator_values.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAWSCodeCommit>("awsCodeCommit", AwsCodeCommit);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorAzureDevOps>("azureDevOps", AzureDevOps);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucket>("bitbucket", Bitbucket);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorBitbucketServer>("bitbucketServer", BitbucketServer);
            writer.WriteStringValue("cloneProtocol", CloneProtocol);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter>("filters", Filters);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitea>("gitea", Gitea);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGithub>("github", Github);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorGitlab>("gitlab", Gitlab);
            writer.WriteLongValue("requeueAfterSeconds", RequeueAfterSeconds);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate>("template", Template);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGenerator_values>("values", Values);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
