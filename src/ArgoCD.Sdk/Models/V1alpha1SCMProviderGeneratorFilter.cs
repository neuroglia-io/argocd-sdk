// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// SCMProviderGeneratorFilter is a single repository filter.If multiple filter types are set on a single struct, they will be AND&apos;d together. All filters mustpass for a repo to be included.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1SCMProviderGeneratorFilter : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A regex which must match the branch name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BranchMatch { get; set; }
#nullable restore
#else
        public string BranchMatch { get; set; }
#endif
        /// <summary>A regex which must match at least one label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LabelMatch { get; set; }
#nullable restore
#else
        public string LabelMatch { get; set; }
#endif
        /// <summary>An array of paths, all of which must not exist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PathsDoNotExist { get; set; }
#nullable restore
#else
        public List<string> PathsDoNotExist { get; set; }
#endif
        /// <summary>An array of paths, all of which must exist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PathsExist { get; set; }
#nullable restore
#else
        public List<string> PathsExist { get; set; }
#endif
        /// <summary>A regex for repo names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryMatch { get; set; }
#nullable restore
#else
        public string RepositoryMatch { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter"/> and sets the default values.
        /// </summary>
        public V1alpha1SCMProviderGeneratorFilter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1SCMProviderGeneratorFilter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "branchMatch", n => { BranchMatch = n.GetStringValue(); } },
                { "labelMatch", n => { LabelMatch = n.GetStringValue(); } },
                { "pathsDoNotExist", n => { PathsDoNotExist = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "pathsExist", n => { PathsExist = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "repositoryMatch", n => { RepositoryMatch = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("branchMatch", BranchMatch);
            writer.WriteStringValue("labelMatch", LabelMatch);
            writer.WriteCollectionOfPrimitiveValues<string>("pathsDoNotExist", PathsDoNotExist);
            writer.WriteCollectionOfPrimitiveValues<string>("pathsExist", PathsExist);
            writer.WriteStringValue("repositoryMatch", RepositoryMatch);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
