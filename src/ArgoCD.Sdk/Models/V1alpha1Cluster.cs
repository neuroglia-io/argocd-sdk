// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1Cluster : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The annotations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1Cluster_annotations? Annotations { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1Cluster_annotations Annotations { get; set; }
#endif
        /// <summary>Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.</summary>
        public bool? ClusterResources { get; set; }
        /// <summary>ClusterConfig is the configuration attributes. This structure is subset of the go-clientrest.Config with annotations added for marshalling.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig? Config { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig Config { get; set; }
#endif
        /// <summary>The connectionState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ConnectionState? ConnectionState { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ConnectionState ConnectionState { get; set; }
#endif
        /// <summary>The info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterInfo? Info { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ClusterInfo Info { get; set; }
#endif
        /// <summary>The labels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1Cluster_labels? Labels { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1Cluster_labels Labels { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Namespaces { get; set; }
#nullable restore
#else
        public List<string> Namespaces { get; set; }
#endif
        /// <summary>The project property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Project { get; set; }
#nullable restore
#else
        public string Project { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? RefreshRequestedAt { get; set; }
        /// <summary>The server property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Server { get; set; }
#nullable restore
#else
        public string Server { get; set; }
#endif
        /// <summary>The serverVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerVersion { get; set; }
#nullable restore
#else
        public string ServerVersion { get; set; }
#endif
        /// <summary>Shard contains optional shard number. Calculated on the fly by the application controller if not specified.</summary>
        public long? Shard { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1Cluster"/> and sets the default values.
        /// </summary>
        public V1alpha1Cluster()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1Cluster"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1Cluster CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1Cluster();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "annotations", n => { Annotations = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1Cluster_annotations>(global::ArgoCD.Sdk.Models.V1alpha1Cluster_annotations.CreateFromDiscriminatorValue); } },
                { "clusterResources", n => { ClusterResources = n.GetBoolValue(); } },
                { "config", n => { Config = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig>(global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig.CreateFromDiscriminatorValue); } },
                { "connectionState", n => { ConnectionState = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ConnectionState>(global::ArgoCD.Sdk.Models.V1alpha1ConnectionState.CreateFromDiscriminatorValue); } },
                { "info", n => { Info = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterInfo>(global::ArgoCD.Sdk.Models.V1alpha1ClusterInfo.CreateFromDiscriminatorValue); } },
                { "labels", n => { Labels = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1Cluster_labels>(global::ArgoCD.Sdk.Models.V1alpha1Cluster_labels.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "namespaces", n => { Namespaces = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "project", n => { Project = n.GetStringValue(); } },
                { "refreshRequestedAt", n => { RefreshRequestedAt = n.GetDateTimeOffsetValue(); } },
                { "server", n => { Server = n.GetStringValue(); } },
                { "serverVersion", n => { ServerVersion = n.GetStringValue(); } },
                { "shard", n => { Shard = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1Cluster_annotations>("annotations", Annotations);
            writer.WriteBoolValue("clusterResources", ClusterResources);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterConfig>("config", Config);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ConnectionState>("connectionState", ConnectionState);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ClusterInfo>("info", Info);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1Cluster_labels>("labels", Labels);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("namespaces", Namespaces);
            writer.WriteStringValue("project", Project);
            writer.WriteDateTimeOffsetValue("refreshRequestedAt", RefreshRequestedAt);
            writer.WriteStringValue("server", Server);
            writer.WriteStringValue("serverVersion", ServerVersion);
            writer.WriteLongValue("shard", Shard);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
