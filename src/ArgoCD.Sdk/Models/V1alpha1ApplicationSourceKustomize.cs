// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1ApplicationSourceKustomize : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ApiVersions { get; set; }
#nullable restore
#else
        public List<string> ApiVersions { get; set; }
#endif
        /// <summary>The commonAnnotations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonAnnotations? CommonAnnotations { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonAnnotations CommonAnnotations { get; set; }
#endif
        /// <summary>The commonAnnotationsEnvsubst property</summary>
        public bool? CommonAnnotationsEnvsubst { get; set; }
        /// <summary>The commonLabels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonLabels? CommonLabels { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonLabels CommonLabels { get; set; }
#endif
        /// <summary>The components property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Components { get; set; }
#nullable restore
#else
        public List<string> Components { get; set; }
#endif
        /// <summary>The forceCommonAnnotations property</summary>
        public bool? ForceCommonAnnotations { get; set; }
        /// <summary>The forceCommonLabels property</summary>
        public bool? ForceCommonLabels { get; set; }
        /// <summary>The ignoreMissingComponents property</summary>
        public bool? IgnoreMissingComponents { get; set; }
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Images { get; set; }
#nullable restore
#else
        public List<string> Images { get; set; }
#endif
        /// <summary>KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CDuses the Kubernetes version of the target cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KubeVersion { get; set; }
#nullable restore
#else
        public string KubeVersion { get; set; }
#endif
        /// <summary>The labelIncludeTemplates property</summary>
        public bool? LabelIncludeTemplates { get; set; }
        /// <summary>The labelWithoutSelector property</summary>
        public bool? LabelWithoutSelector { get; set; }
        /// <summary>The namePrefix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NamePrefix { get; set; }
#nullable restore
#else
        public string NamePrefix { get; set; }
#endif
        /// <summary>The namespace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Namespace { get; set; }
#nullable restore
#else
        public string Namespace { get; set; }
#endif
        /// <summary>The nameSuffix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameSuffix { get; set; }
#nullable restore
#else
        public string NameSuffix { get; set; }
#endif
        /// <summary>The patches property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1KustomizePatch>? Patches { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1KustomizePatch> Patches { get; set; }
#endif
        /// <summary>The replicas property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1KustomizeReplica>? Replicas { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1KustomizeReplica> Replicas { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationSourceKustomize()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiVersions", n => { ApiVersions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "commonAnnotations", n => { CommonAnnotations = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonAnnotations>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonAnnotations.CreateFromDiscriminatorValue); } },
                { "commonAnnotationsEnvsubst", n => { CommonAnnotationsEnvsubst = n.GetBoolValue(); } },
                { "commonLabels", n => { CommonLabels = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonLabels>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonLabels.CreateFromDiscriminatorValue); } },
                { "components", n => { Components = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "forceCommonAnnotations", n => { ForceCommonAnnotations = n.GetBoolValue(); } },
                { "forceCommonLabels", n => { ForceCommonLabels = n.GetBoolValue(); } },
                { "ignoreMissingComponents", n => { IgnoreMissingComponents = n.GetBoolValue(); } },
                { "images", n => { Images = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "kubeVersion", n => { KubeVersion = n.GetStringValue(); } },
                { "labelIncludeTemplates", n => { LabelIncludeTemplates = n.GetBoolValue(); } },
                { "labelWithoutSelector", n => { LabelWithoutSelector = n.GetBoolValue(); } },
                { "namePrefix", n => { NamePrefix = n.GetStringValue(); } },
                { "nameSuffix", n => { NameSuffix = n.GetStringValue(); } },
                { "namespace", n => { Namespace = n.GetStringValue(); } },
                { "patches", n => { Patches = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1KustomizePatch>(global::ArgoCD.Sdk.Models.V1alpha1KustomizePatch.CreateFromDiscriminatorValue)?.AsList(); } },
                { "replicas", n => { Replicas = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1KustomizeReplica>(global::ArgoCD.Sdk.Models.V1alpha1KustomizeReplica.CreateFromDiscriminatorValue)?.AsList(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("apiVersions", ApiVersions);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonAnnotations>("commonAnnotations", CommonAnnotations);
            writer.WriteBoolValue("commonAnnotationsEnvsubst", CommonAnnotationsEnvsubst);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceKustomize_commonLabels>("commonLabels", CommonLabels);
            writer.WriteCollectionOfPrimitiveValues<string>("components", Components);
            writer.WriteBoolValue("forceCommonAnnotations", ForceCommonAnnotations);
            writer.WriteBoolValue("forceCommonLabels", ForceCommonLabels);
            writer.WriteBoolValue("ignoreMissingComponents", IgnoreMissingComponents);
            writer.WriteCollectionOfPrimitiveValues<string>("images", Images);
            writer.WriteStringValue("kubeVersion", KubeVersion);
            writer.WriteBoolValue("labelIncludeTemplates", LabelIncludeTemplates);
            writer.WriteBoolValue("labelWithoutSelector", LabelWithoutSelector);
            writer.WriteStringValue("namePrefix", NamePrefix);
            writer.WriteStringValue("namespace", Namespace);
            writer.WriteStringValue("nameSuffix", NameSuffix);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1KustomizePatch>("patches", Patches);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1KustomizeReplica>("replicas", Replicas);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
