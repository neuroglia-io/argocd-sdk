// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ApplicationTree represents the hierarchical structure of resources associated with an Argo CD application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1ApplicationTree : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Hosts provides a list of Kubernetes nodes that are running pods related to the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1HostInfo>? Hosts { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1HostInfo> Hosts { get; set; }
#endif
        /// <summary>Nodes contains a list of resources that are either directly managed by the applicationor are children of directly managed resources.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>? Nodes { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode> Nodes { get; set; }
#endif
        /// <summary>OrphanedNodes contains resources that exist in the same namespace as the applicationbut are not managed by it. This list is populated only if orphaned resource trackingis enabled in the application&apos;s project settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>? OrphanedNodes { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode> OrphanedNodes { get; set; }
#endif
        /// <summary>ShardsCount represents the total number of shards the application tree is split into.This is used to distribute resource processing across multiple shards.</summary>
        public long? ShardsCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationTree"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationTree()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationTree"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationTree CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationTree();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hosts", n => { Hosts = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HostInfo>(global::ArgoCD.Sdk.Models.V1alpha1HostInfo.CreateFromDiscriminatorValue)?.AsList(); } },
                { "nodes", n => { Nodes = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>(global::ArgoCD.Sdk.Models.V1alpha1ResourceNode.CreateFromDiscriminatorValue)?.AsList(); } },
                { "orphanedNodes", n => { OrphanedNodes = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>(global::ArgoCD.Sdk.Models.V1alpha1ResourceNode.CreateFromDiscriminatorValue)?.AsList(); } },
                { "shardsCount", n => { ShardsCount = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HostInfo>("hosts", Hosts);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>("nodes", Nodes);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ResourceNode>("orphanedNodes", OrphanedNodes);
            writer.WriteLongValue("shardsCount", ShardsCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
