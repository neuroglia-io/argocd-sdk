// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1NodeSystemInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The architecture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Architecture { get; set; }
#nullable restore
#else
        public string Architecture { get; set; }
#endif
        /// <summary>Boot ID reported by the node.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BootID { get; set; }
#nullable restore
#else
        public string BootID { get; set; }
#endif
        /// <summary>ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContainerRuntimeVersion { get; set; }
#nullable restore
#else
        public string ContainerRuntimeVersion { get; set; }
#endif
        /// <summary>Kernel Version reported by the node from &apos;uname -r&apos; (e.g. 3.16.0-0.bpo.4-amd64).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KernelVersion { get; set; }
#nullable restore
#else
        public string KernelVersion { get; set; }
#endif
        /// <summary>Kubelet Version reported by the node.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KubeletVersion { get; set; }
#nullable restore
#else
        public string KubeletVersion { get; set; }
#endif
        /// <summary>Deprecated: KubeProxy Version reported by the node.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KubeProxyVersion { get; set; }
#nullable restore
#else
        public string KubeProxyVersion { get; set; }
#endif
        /// <summary>The machineID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineID { get; set; }
#nullable restore
#else
        public string MachineID { get; set; }
#endif
        /// <summary>The operatingSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperatingSystem { get; set; }
#nullable restore
#else
        public string OperatingSystem { get; set; }
#endif
        /// <summary>OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsImage { get; set; }
#nullable restore
#else
        public string OsImage { get; set; }
#endif
        /// <summary>NodeSwapStatus represents swap memory information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1NodeSwapStatus? Swap { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1NodeSwapStatus Swap { get; set; }
#endif
        /// <summary>The systemUUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemUUID { get; set; }
#nullable restore
#else
        public string SystemUUID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1NodeSystemInfo"/> and sets the default values.
        /// </summary>
        public V1NodeSystemInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1NodeSystemInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1NodeSystemInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1NodeSystemInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "architecture", n => { Architecture = n.GetStringValue(); } },
                { "bootID", n => { BootID = n.GetStringValue(); } },
                { "containerRuntimeVersion", n => { ContainerRuntimeVersion = n.GetStringValue(); } },
                { "kernelVersion", n => { KernelVersion = n.GetStringValue(); } },
                { "kubeProxyVersion", n => { KubeProxyVersion = n.GetStringValue(); } },
                { "kubeletVersion", n => { KubeletVersion = n.GetStringValue(); } },
                { "machineID", n => { MachineID = n.GetStringValue(); } },
                { "operatingSystem", n => { OperatingSystem = n.GetStringValue(); } },
                { "osImage", n => { OsImage = n.GetStringValue(); } },
                { "swap", n => { Swap = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1NodeSwapStatus>(global::ArgoCD.Sdk.Models.V1NodeSwapStatus.CreateFromDiscriminatorValue); } },
                { "systemUUID", n => { SystemUUID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("architecture", Architecture);
            writer.WriteStringValue("bootID", BootID);
            writer.WriteStringValue("containerRuntimeVersion", ContainerRuntimeVersion);
            writer.WriteStringValue("kernelVersion", KernelVersion);
            writer.WriteStringValue("kubeletVersion", KubeletVersion);
            writer.WriteStringValue("kubeProxyVersion", KubeProxyVersion);
            writer.WriteStringValue("machineID", MachineID);
            writer.WriteStringValue("operatingSystem", OperatingSystem);
            writer.WriteStringValue("osImage", OsImage);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1NodeSwapStatus>("swap", Swap);
            writer.WriteStringValue("systemUUID", SystemUUID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
