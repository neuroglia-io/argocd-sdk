// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ResourceStatus holds the current synchronization and health status of a Kubernetes resource.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Applicationv1alpha1ResourceStatus : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Group represents the API group of the resource (e.g., &quot;apps&quot; for Deployments).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>The health property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1HealthStatus? Health { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1HealthStatus Health { get; set; }
#endif
        /// <summary>Hook is true if the resource is used as a lifecycle hook in an Argo CD application.</summary>
        public bool? Hook { get; set; }
        /// <summary>Kind specifies the type of the resource (e.g., &quot;Deployment&quot;, &quot;Service&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kind { get; set; }
#nullable restore
#else
        public string Kind { get; set; }
#endif
        /// <summary>Name is the unique name of the resource within the namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Namespace defines the Kubernetes namespace where the resource is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Namespace { get; set; }
#nullable restore
#else
        public string Namespace { get; set; }
#endif
        /// <summary>RequiresDeletionConfirmation is true if the resource requires explicit user confirmation before deletion.</summary>
        public bool? RequiresDeletionConfirmation { get; set; }
        /// <summary>RequiresPruning is true if the resource needs to be pruned (deleted) as part of synchronization.</summary>
        public bool? RequiresPruning { get; set; }
        /// <summary>Status represents the synchronization state of the resource (e.g., Synced, OutOfSync).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>SyncWave determines the order in which resources are applied during a sync operation.Lower values are applied first.</summary>
        public long? SyncWave { get; set; }
        /// <summary>Version indicates the API version of the resource (e.g., &quot;v1&quot;, &quot;v1beta1&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus"/> and sets the default values.
        /// </summary>
        public Applicationv1alpha1ResourceStatus()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.Applicationv1alpha1ResourceStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "group", n => { Group = n.GetStringValue(); } },
                { "health", n => { Health = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1HealthStatus>(global::ArgoCD.Sdk.Models.V1alpha1HealthStatus.CreateFromDiscriminatorValue); } },
                { "hook", n => { Hook = n.GetBoolValue(); } },
                { "kind", n => { Kind = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "namespace", n => { Namespace = n.GetStringValue(); } },
                { "requiresDeletionConfirmation", n => { RequiresDeletionConfirmation = n.GetBoolValue(); } },
                { "requiresPruning", n => { RequiresPruning = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "syncWave", n => { SyncWave = n.GetLongValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("group", Group);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1HealthStatus>("health", Health);
            writer.WriteBoolValue("hook", Hook);
            writer.WriteStringValue("kind", Kind);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("namespace", Namespace);
            writer.WriteBoolValue("requiresDeletionConfirmation", RequiresDeletionConfirmation);
            writer.WriteBoolValue("requiresPruning", RequiresPruning);
            writer.WriteStringValue("status", Status);
            writer.WriteLongValue("syncWave", SyncWave);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
