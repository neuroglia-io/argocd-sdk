// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// HostResourceInfo represents resource usage details for a specific resource type on a host.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1HostResourceInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Capacity represents the total available capacity of this resource on the host.</summary>
        public long? Capacity { get; set; }
        /// <summary>RequestedByApp indicates the total amount of this resource requested by the application running on the host.</summary>
        public long? RequestedByApp { get; set; }
        /// <summary>RequestedByNeighbors indicates the total amount of this resource requested by other workloads on the same host.</summary>
        public long? RequestedByNeighbors { get; set; }
        /// <summary>ResourceName specifies the type of resource (e.g., CPU, memory, storage).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceName { get; set; }
#nullable restore
#else
        public string ResourceName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1HostResourceInfo"/> and sets the default values.
        /// </summary>
        public V1alpha1HostResourceInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1HostResourceInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1HostResourceInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1HostResourceInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capacity", n => { Capacity = n.GetLongValue(); } },
                { "requestedByApp", n => { RequestedByApp = n.GetLongValue(); } },
                { "requestedByNeighbors", n => { RequestedByNeighbors = n.GetLongValue(); } },
                { "resourceName", n => { ResourceName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("capacity", Capacity);
            writer.WriteLongValue("requestedByApp", RequestedByApp);
            writer.WriteLongValue("requestedByNeighbors", RequestedByNeighbors);
            writer.WriteStringValue("resourceName", ResourceName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
