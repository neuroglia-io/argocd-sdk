// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// MergeGenerator merges the output of two or more generators. Where the values for all specified merge keys are equalbetween two sets of generated parameters, the parameter sets will be merged with the parameters from the lattergenerator taking precedence. Parameter sets with merge keys not present in the base generator&apos;s params will beignored.For example, if the first generator produced [{a: &apos;1&apos;, b: &apos;2&apos;}, {c: &apos;1&apos;, d: &apos;1&apos;}] and the second generator produced[{&apos;a&apos;: &apos;override&apos;}], the united parameters for merge keys = [&apos;a&apos;] would be[{a: &apos;override&apos;, b: &apos;1&apos;}, {c: &apos;1&apos;, d: &apos;1&apos;}].MergeGenerator supports template overriding. If a MergeGenerator is one of multiple top-level generators, itstemplate will be merged with the top-level generator before the parameters are applied.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1alpha1MergeGenerator : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The generators property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator>? Generators { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator> Generators { get; set; }
#endif
        /// <summary>The mergeKeys property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MergeKeys { get; set; }
#nullable restore
#else
        public List<string> MergeKeys { get; set; }
#endif
        /// <summary>The template property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate? Template { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate Template { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1MergeGenerator"/> and sets the default values.
        /// </summary>
        public V1alpha1MergeGenerator()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1MergeGenerator"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1MergeGenerator CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1MergeGenerator();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "generators", n => { Generators = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mergeKeys", n => { MergeKeys = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "template", n => { Template = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate>(global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetNestedGenerator>("generators", Generators);
            writer.WriteCollectionOfPrimitiveValues<string>("mergeKeys", MergeKeys);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1ApplicationSetTemplate>("template", Template);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
