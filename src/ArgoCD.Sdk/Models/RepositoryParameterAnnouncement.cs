// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RepositoryParameterAnnouncement : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>array is the default value of the parameter if the parameter is an array.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Array { get; set; }
#nullable restore
#else
        public List<string> Array { get; set; }
#endif
        /// <summary>collectionType is the type of value this parameter holds - either a single value (a string) or a collection(array or map). If collectionType is set, only the field with that type will be used. If collectionType is notset, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CollectionType { get; set; }
#nullable restore
#else
        public string CollectionType { get; set; }
#endif
        /// <summary>itemType determines the primitive data type represented by the parameter. Parameters are always encoded asstrings, but this field lets them be interpreted as other primitive types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemType { get; set; }
#nullable restore
#else
        public string ItemType { get; set; }
#endif
        /// <summary>map is the default value of the parameter if the parameter is a map.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement_map? Map { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement_map Map { get; set; }
#endif
        /// <summary>name is the name identifying a parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>required defines if this given parameter is mandatory.</summary>
        public bool? Required { get; set; }
        /// <summary>string is the default value of the parameter if the parameter is a string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? String { get; set; }
#nullable restore
#else
        public string String { get; set; }
#endif
        /// <summary>title is a human-readable text of the parameter name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>tooltip is a human-readable description of the parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tooltip { get; set; }
#nullable restore
#else
        public string Tooltip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement"/> and sets the default values.
        /// </summary>
        public RepositoryParameterAnnouncement()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "array", n => { Array = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "collectionType", n => { CollectionType = n.GetStringValue(); } },
                { "itemType", n => { ItemType = n.GetStringValue(); } },
                { "map", n => { Map = n.GetObjectValue<global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement_map>(global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement_map.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "required", n => { Required = n.GetBoolValue(); } },
                { "string", n => { String = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tooltip", n => { Tooltip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("array", Array);
            writer.WriteStringValue("collectionType", CollectionType);
            writer.WriteStringValue("itemType", ItemType);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.RepositoryParameterAnnouncement_map>("map", Map);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("required", Required);
            writer.WriteStringValue("string", String);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("tooltip", Tooltip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
