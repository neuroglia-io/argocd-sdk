// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1HydrateOperation : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The drySHA property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DrySHA { get; set; }
#nullable restore
#else
        public string DrySHA { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? FinishedAt { get; set; }
        /// <summary>The hydratedSHA property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HydratedSHA { get; set; }
#nullable restore
#else
        public string HydratedSHA { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The phase property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phase { get; set; }
#nullable restore
#else
        public string Phase { get; set; }
#endif
        /// <summary>SourceHydrator specifies a dry &quot;don&apos;t repeat yourself&quot; source for manifests, a sync source from which to synchydrated manifests, and an optional hydrateTo location to act as a &quot;staging&quot; aread for hydrated manifests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator? SourceHydrator { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator SourceHydrator { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1HydrateOperation"/> and sets the default values.
        /// </summary>
        public V1alpha1HydrateOperation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1HydrateOperation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1HydrateOperation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1HydrateOperation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "drySHA", n => { DrySHA = n.GetStringValue(); } },
                { "finishedAt", n => { FinishedAt = n.GetDateTimeOffsetValue(); } },
                { "hydratedSHA", n => { HydratedSHA = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "phase", n => { Phase = n.GetStringValue(); } },
                { "sourceHydrator", n => { SourceHydrator = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator>(global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator.CreateFromDiscriminatorValue); } },
                { "startedAt", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("drySHA", DrySHA);
            writer.WriteDateTimeOffsetValue("finishedAt", FinishedAt);
            writer.WriteStringValue("hydratedSHA", HydratedSHA);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("phase", Phase);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1alpha1SourceHydrator>("sourceHydrator", SourceHydrator);
            writer.WriteDateTimeOffsetValue("startedAt", StartedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
