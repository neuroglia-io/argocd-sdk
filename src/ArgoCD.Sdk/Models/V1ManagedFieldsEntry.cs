// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resourcethat the fieldset applies to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1ManagedFieldsEntry : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>APIVersion defines the version of this resource that this field setapplies to. The format is &quot;group/version&quot; just like the top-levelAPIVersion field. It is necessary to track the version of a fieldset because it cannot be automatically converted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiVersion { get; set; }
#nullable restore
#else
        public string ApiVersion { get; set; }
#endif
        /// <summary>The fieldsType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldsType { get; set; }
#nullable restore
#else
        public string FieldsType { get; set; }
#endif
        /// <summary>FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.Each key is either a &apos;.&apos; representing the field itself, and will always map to an empty set,or a string representing a sub-field or item. The string will follow one of these four formats:&apos;f:&lt;name&gt;&apos;, where &lt;name&gt; is the name of a field in a struct, or key in a map&apos;v:&lt;value&gt;&apos;, where &lt;value&gt; is the exact json formatted value of a list item&apos;i:&lt;index&gt;&apos;, where &lt;index&gt; is position of a item in a list&apos;k:&lt;keys&gt;&apos;, where &lt;keys&gt; is a map of  a list item&apos;s key fields to their unique valuesIf a key maps to an empty Fields value, the field that key represents is part of the set.The exact format is defined in sigs.k8s.io/structured-merge-diff+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.V1FieldsV1? FieldsV1 { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.V1FieldsV1 FieldsV1 { get; set; }
#endif
        /// <summary>Manager is an identifier of the workflow managing these fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manager { get; set; }
#nullable restore
#else
        public string Manager { get; set; }
#endif
        /// <summary>Operation is the type of operation which lead to this ManagedFieldsEntry being created.The only valid values for this field are &apos;Apply&apos; and &apos;Update&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operation { get; set; }
#nullable restore
#else
        public string Operation { get; set; }
#endif
        /// <summary>Subresource is the name of the subresource used to update that object, orempty string if the object was updated through the main resource. Thevalue of this field is used to distinguish between managers, even if theyshare the same name. For example, a status update will be distinct from aregular update using the same manager name.Note that the APIVersion field is not related to the Subresource field andit always corresponds to the version of the main resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subresource { get; set; }
#nullable restore
#else
        public string Subresource { get; set; }
#endif
        /// <summary>Time is a wrapper around time.Time which supports correctmarshaling to YAML and JSON.  Wrappers are provided for manyof the factory methods that the time package offers.+protobuf.options.marshal=false+protobuf.as=Timestamp+protobuf.options.(gogoproto.goproto_stringer)=false</summary>
        public DateTimeOffset? Time { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1ManagedFieldsEntry"/> and sets the default values.
        /// </summary>
        public V1ManagedFieldsEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1ManagedFieldsEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1ManagedFieldsEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1ManagedFieldsEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiVersion", n => { ApiVersion = n.GetStringValue(); } },
                { "fieldsType", n => { FieldsType = n.GetStringValue(); } },
                { "fieldsV1", n => { FieldsV1 = n.GetObjectValue<global::ArgoCD.Sdk.Models.V1FieldsV1>(global::ArgoCD.Sdk.Models.V1FieldsV1.CreateFromDiscriminatorValue); } },
                { "manager", n => { Manager = n.GetStringValue(); } },
                { "operation", n => { Operation = n.GetStringValue(); } },
                { "subresource", n => { Subresource = n.GetStringValue(); } },
                { "time", n => { Time = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiVersion", ApiVersion);
            writer.WriteStringValue("fieldsType", FieldsType);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.V1FieldsV1>("fieldsV1", FieldsV1);
            writer.WriteStringValue("manager", Manager);
            writer.WriteStringValue("operation", Operation);
            writer.WriteStringValue("subresource", Subresource);
            writer.WriteDateTimeOffsetValue("time", Time);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
