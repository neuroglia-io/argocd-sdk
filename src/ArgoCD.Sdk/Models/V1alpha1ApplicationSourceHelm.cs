// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class V1alpha1ApplicationSourceHelm : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ApiVersions { get; set; }
#nullable restore
#else
        public List<string> ApiVersions { get; set; }
#endif
        /// <summary>The fileParameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1HelmFileParameter>? FileParameters { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1HelmFileParameter> FileParameters { get; set; }
#endif
        /// <summary>The ignoreMissingValueFiles property</summary>
        public bool? IgnoreMissingValueFiles { get; set; }
        /// <summary>KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CDuses the Kubernetes version of the target cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KubeVersion { get; set; }
#nullable restore
#else
        public string KubeVersion { get; set; }
#endif
        /// <summary>Namespace is an optional namespace to template with. If left empty, defaults to the app&apos;s destination namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Namespace { get; set; }
#nullable restore
#else
        public string Namespace { get; set; }
#endif
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArgoCD.Sdk.Models.V1alpha1HelmParameter>? Parameters { get; set; }
#nullable restore
#else
        public List<global::ArgoCD.Sdk.Models.V1alpha1HelmParameter> Parameters { get; set; }
#endif
        /// <summary>The passCredentials property</summary>
        public bool? PassCredentials { get; set; }
        /// <summary>The releaseName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseName { get; set; }
#nullable restore
#else
        public string ReleaseName { get; set; }
#endif
        /// <summary>The skipCrds property</summary>
        public bool? SkipCrds { get; set; }
        /// <summary>The skipSchemaValidation property</summary>
        public bool? SkipSchemaValidation { get; set; }
        /// <summary>SkipTests skips test manifest installation step (Helm&apos;s --skip-tests).</summary>
        public bool? SkipTests { get; set; }
        /// <summary>The valueFiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ValueFiles { get; set; }
#nullable restore
#else
        public List<string> ValueFiles { get; set; }
#endif
        /// <summary>The values property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Values { get; set; }
#nullable restore
#else
        public string Values { get; set; }
#endif
        /// <summary>RawExtension is used to hold extensions in external versions.To use this, make a field which has RawExtension as its type in your external, versionedstruct, and Object in your internal struct. You also need to register yourvarious plugin types.// Internal package:type MyAPIObject struct {runtime.TypeMeta `json:&quot;,inline&quot;`MyPlugin runtime.Object `json:&quot;myPlugin&quot;`}type PluginA struct {AOption string `json:&quot;aOption&quot;`}// External package:type MyAPIObject struct {runtime.TypeMeta `json:&quot;,inline&quot;`MyPlugin runtime.RawExtension `json:&quot;myPlugin&quot;`}type PluginA struct {AOption string `json:&quot;aOption&quot;`}// On the wire, the JSON will look something like this:{&quot;kind&quot;:&quot;MyAPIObject&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;myPlugin&quot;: {&quot;kind&quot;:&quot;PluginA&quot;,&quot;aOption&quot;:&quot;foo&quot;,},}So what happens? Decode first uses json or yaml to unmarshal the serialized data intoyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.The next step is to copy (using pkg/conversion) into the internal struct. The runtimepackage&apos;s DefaultScheme has conversion functions installed which will unpack theJSON stored in RawExtension, turning it into the correct object type, and storing itin the Object. (TODO: In the case where the object is of an unknown type, aruntime.Unknown object will be created and stored.)+k8s:deepcopy-gen=true+protobuf=true+k8s:openapi-gen=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArgoCD.Sdk.Models.RuntimeRawExtension? ValuesObject { get; set; }
#nullable restore
#else
        public global::ArgoCD.Sdk.Models.RuntimeRawExtension ValuesObject { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm"/> and sets the default values.
        /// </summary>
        public V1alpha1ApplicationSourceHelm()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1alpha1ApplicationSourceHelm();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiVersions", n => { ApiVersions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fileParameters", n => { FileParameters = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HelmFileParameter>(global::ArgoCD.Sdk.Models.V1alpha1HelmFileParameter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ignoreMissingValueFiles", n => { IgnoreMissingValueFiles = n.GetBoolValue(); } },
                { "kubeVersion", n => { KubeVersion = n.GetStringValue(); } },
                { "namespace", n => { Namespace = n.GetStringValue(); } },
                { "parameters", n => { Parameters = n.GetCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HelmParameter>(global::ArgoCD.Sdk.Models.V1alpha1HelmParameter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "passCredentials", n => { PassCredentials = n.GetBoolValue(); } },
                { "releaseName", n => { ReleaseName = n.GetStringValue(); } },
                { "skipCrds", n => { SkipCrds = n.GetBoolValue(); } },
                { "skipSchemaValidation", n => { SkipSchemaValidation = n.GetBoolValue(); } },
                { "skipTests", n => { SkipTests = n.GetBoolValue(); } },
                { "valueFiles", n => { ValueFiles = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "values", n => { Values = n.GetStringValue(); } },
                { "valuesObject", n => { ValuesObject = n.GetObjectValue<global::ArgoCD.Sdk.Models.RuntimeRawExtension>(global::ArgoCD.Sdk.Models.RuntimeRawExtension.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("apiVersions", ApiVersions);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HelmFileParameter>("fileParameters", FileParameters);
            writer.WriteBoolValue("ignoreMissingValueFiles", IgnoreMissingValueFiles);
            writer.WriteStringValue("kubeVersion", KubeVersion);
            writer.WriteStringValue("namespace", Namespace);
            writer.WriteCollectionOfObjectValues<global::ArgoCD.Sdk.Models.V1alpha1HelmParameter>("parameters", Parameters);
            writer.WriteBoolValue("passCredentials", PassCredentials);
            writer.WriteStringValue("releaseName", ReleaseName);
            writer.WriteBoolValue("skipCrds", SkipCrds);
            writer.WriteBoolValue("skipSchemaValidation", SkipSchemaValidation);
            writer.WriteBoolValue("skipTests", SkipTests);
            writer.WriteCollectionOfPrimitiveValues<string>("valueFiles", ValueFiles);
            writer.WriteStringValue("values", Values);
            writer.WriteObjectValue<global::ArgoCD.Sdk.Models.RuntimeRawExtension>("valuesObject", ValuesObject);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
