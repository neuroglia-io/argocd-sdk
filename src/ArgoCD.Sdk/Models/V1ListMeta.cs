// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArgoCD.Sdk.Models
{
    /// <summary>
    /// ListMeta describes metadata that synthetic resources must have, including lists andvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V1ListMeta : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>continue may be set if the user set a limit on the number of items returned, and indicates thatthe server has more data available. The value is opaque and may be used to issue another requestto the endpoint that served this list to retrieve the next set of available objects. Continuing aconsistent list may not be possible if the server configuration has changed or more than a fewminutes have passed. The resourceVersion field returned when using this continue value will beidentical to the value in the first response, unless you have received this token from an errormessage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Continue { get; set; }
#nullable restore
#else
        public string Continue { get; set; }
#endif
        /// <summary>The remainingItemCount property</summary>
        public long? RemainingItemCount { get; set; }
        /// <summary>The resourceVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceVersion { get; set; }
#nullable restore
#else
        public string ResourceVersion { get; set; }
#endif
        /// <summary>The selfLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SelfLink { get; set; }
#nullable restore
#else
        public string SelfLink { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArgoCD.Sdk.Models.V1ListMeta"/> and sets the default values.
        /// </summary>
        public V1ListMeta()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArgoCD.Sdk.Models.V1ListMeta"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArgoCD.Sdk.Models.V1ListMeta CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArgoCD.Sdk.Models.V1ListMeta();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "continue", n => { Continue = n.GetStringValue(); } },
                { "remainingItemCount", n => { RemainingItemCount = n.GetLongValue(); } },
                { "resourceVersion", n => { ResourceVersion = n.GetStringValue(); } },
                { "selfLink", n => { SelfLink = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("continue", Continue);
            writer.WriteLongValue("remainingItemCount", RemainingItemCount);
            writer.WriteStringValue("resourceVersion", ResourceVersion);
            writer.WriteStringValue("selfLink", SelfLink);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
